"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var M=require("events"),u=require("@walletconnect/utils"),A=require("@walletconnect/universal-provider");function T(n){if(n&&n.__esModule)return n;var t=Object.create(null);return n&&Object.keys(n).forEach(function(s){if(s!=="default"){var e=Object.getOwnPropertyDescriptor(n,s);Object.defineProperty(t,s,e.get?e:{enumerable:!0,get:function(){return n[s]}})}}),t.default=n,Object.freeze(t)}const S="wc",R="ethereum_provider",j=`${S}@2:${R}:`,N="https://rpc.walletconnect.org/v1/",m=["eth_sendTransaction","personal_sign"],O=["eth_accounts","eth_requestAccounts","eth_sendRawTransaction","eth_sign","eth_signTransaction","eth_signTypedData","eth_signTypedData_v3","eth_signTypedData_v4","eth_sendTransaction","personal_sign","wallet_switchEthereumChain","wallet_addEthereumChain","wallet_getPermissions","wallet_requestPermissions","wallet_registerOnboarding","wallet_watchAsset","wallet_scanQRCode","wallet_sendCalls","wallet_getCapabilities","wallet_getCallsStatus","wallet_showCallsStatus"],v=["chainChanged","accountsChanged"],b=["chainChanged","accountsChanged","message","disconnect","connect"];var q=Object.defineProperty,D=Object.defineProperties,$=Object.getOwnPropertyDescriptors,P=Object.getOwnPropertySymbols,U=Object.prototype.hasOwnProperty,Q=Object.prototype.propertyIsEnumerable,_=(n,t,s)=>t in n?q(n,t,{enumerable:!0,configurable:!0,writable:!0,value:s}):n[t]=s,g=(n,t)=>{for(var s in t||(t={}))U.call(t,s)&&_(n,s,t[s]);if(P)for(var s of P(t))Q.call(t,s)&&_(n,s,t[s]);return n},y=(n,t)=>D(n,$(t)),o=(n,t,s)=>_(n,typeof t!="symbol"?t+"":t,s);function C(n){return Number(n[0].split(":")[1])}function I(n){return`0x${n.toString(16)}`}function L(n){const{chains:t,optionalChains:s,methods:e,optionalMethods:i,events:a,optionalEvents:c,rpcMap:l}=n;if(!u.isValidArray(t))throw new Error("Invalid chains");const r={chains:t,methods:e||m,events:a||v,rpcMap:g({},t.length?{[C(t)]:l[C(t)]}:{})},d=a?.filter(p=>!v.includes(p)),h=e?.filter(p=>!m.includes(p));if(!s&&!c&&!i&&!(d!=null&&d.length)&&!(h!=null&&h.length))return{required:t.length?r:void 0};const f=d?.length&&h?.length||!s,E={chains:[...new Set(f?r.chains.concat(s||[]):s)],methods:[...new Set(r.methods.concat(i!=null&&i.length?i:O))],events:[...new Set(r.events.concat(c!=null&&c.length?c:b))],rpcMap:l};return{required:t.length?r:void 0,optional:s.length?E:void 0}}class w{constructor(){o(this,"events",new M.EventEmitter),o(this,"namespace","eip155"),o(this,"accounts",[]),o(this,"signer"),o(this,"chainId",1),o(this,"modal"),o(this,"rpc"),o(this,"STORAGE_KEY",j),o(this,"on",(t,s)=>(this.events.on(t,s),this)),o(this,"once",(t,s)=>(this.events.once(t,s),this)),o(this,"removeListener",(t,s)=>(this.events.removeListener(t,s),this)),o(this,"off",(t,s)=>(this.events.off(t,s),this)),o(this,"parseAccount",t=>this.isCompatibleChainId(t)?this.parseAccountId(t).address:t),this.signer={},this.rpc={}}static async init(t){const s=new w;return await s.initialize(t),s}async request(t,s){return await this.signer.request(t,this.formatChainId(this.chainId),s)}sendAsync(t,s,e){this.signer.sendAsync(t,s,this.formatChainId(this.chainId),e)}get connected(){return this.signer.client?this.signer.client.core.relayer.connected:!1}get connecting(){return this.signer.client?this.signer.client.core.relayer.connecting:!1}async enable(){return this.session||await this.connect(),await this.request({method:"eth_requestAccounts"})}async connect(t){if(!this.signer.client)throw new Error("Provider not initialized. Call init() first");this.loadConnectOpts(t);const{required:s,optional:e}=L(this.rpc);try{const i=await new Promise(async(c,l)=>{var r;this.rpc.showQrModal&&((r=this.modal)==null||r.subscribeModal(h=>{!h.open&&!this.signer.session&&(this.signer.abortPairingAttempt(),l(new Error("Connection request reset. Please try again.")))}));const d=t!=null&&t.scopedProperties?{[this.namespace]:t.scopedProperties}:void 0;await this.signer.connect(y(g({namespaces:g({},s&&{[this.namespace]:s})},e&&{optionalNamespaces:{[this.namespace]:e}}),{pairingTopic:t?.pairingTopic,scopedProperties:d})).then(h=>{c(h)}).catch(h=>{l(new Error(h.message))})});if(!i)return;const a=u.getAccountsFromNamespaces(i.namespaces,[this.namespace]);this.setChainIds(this.rpc.chains.length?this.rpc.chains:a),this.setAccounts(a),this.events.emit("connect",{chainId:I(this.chainId)})}catch(i){throw this.signer.logger.error(i),i}finally{this.modal&&this.modal.closeModal()}}async authenticate(t,s){if(!this.signer.client)throw new Error("Provider not initialized. Call init() first");this.loadConnectOpts({chains:t?.chains});try{const e=await new Promise(async(a,c)=>{var l;this.rpc.showQrModal&&((l=this.modal)==null||l.subscribeModal(r=>{!r.open&&!this.signer.session&&(this.signer.abortPairingAttempt(),c(new Error("Connection request reset. Please try again.")))})),await this.signer.authenticate(y(g({},t),{chains:this.rpc.chains}),s).then(r=>{a(r)}).catch(r=>{c(new Error(r.message))})}),i=e.session;if(i){const a=u.getAccountsFromNamespaces(i.namespaces,[this.namespace]);this.setChainIds(this.rpc.chains.length?this.rpc.chains:a),this.setAccounts(a),this.events.emit("connect",{chainId:I(this.chainId)})}return e}catch(e){throw this.signer.logger.error(e),e}finally{this.modal&&this.modal.closeModal()}}async disconnect(){this.session&&await this.signer.disconnect(),this.reset()}get isWalletConnect(){return!0}get session(){return this.signer.session}registerEventListeners(){this.signer.on("session_event",t=>{const{params:s}=t,{event:e}=s;e.name==="accountsChanged"?(this.accounts=this.parseAccounts(e.data),this.events.emit("accountsChanged",this.accounts)):e.name==="chainChanged"?this.setChainId(this.formatChainId(e.data)):this.events.emit(e.name,e.data),this.events.emit("session_event",t)}),this.signer.on("accountsChanged",t=>{this.accounts=this.parseAccounts(t),this.events.emit("accountsChanged",this.accounts)}),this.signer.on("chainChanged",t=>{const s=parseInt(t);this.chainId=s,this.events.emit("chainChanged",I(this.chainId)),this.persist()}),this.signer.on("session_update",t=>{this.events.emit("session_update",t)}),this.signer.on("session_delete",t=>{this.reset(),this.events.emit("session_delete",t),this.events.emit("disconnect",y(g({},u.getSdkError("USER_DISCONNECTED")),{data:t.topic,name:"USER_DISCONNECTED"}))}),this.signer.on("display_uri",t=>{var s,e;this.rpc.showQrModal&&((s=this.modal)==null||s.closeModal(),(e=this.modal)==null||e.openModal({uri:t})),this.events.emit("display_uri",t)})}switchEthereumChain(t){this.request({method:"wallet_switchEthereumChain",params:[{chainId:t.toString(16)}]})}isCompatibleChainId(t){return typeof t=="string"?t.startsWith(`${this.namespace}:`):!1}formatChainId(t){return`${this.namespace}:${t}`}parseChainId(t){return Number(t.split(":")[1])}setChainIds(t){const s=t.filter(e=>this.isCompatibleChainId(e)).map(e=>this.parseChainId(e));s.length&&(this.chainId=s[0],this.events.emit("chainChanged",I(this.chainId)),this.persist())}setChainId(t){if(this.isCompatibleChainId(t)){const s=this.parseChainId(t);this.chainId=s,this.switchEthereumChain(s)}}parseAccountId(t){const[s,e,i]=t.split(":");return{chainId:`${s}:${e}`,address:i}}setAccounts(t){this.accounts=t.filter(s=>this.parseChainId(this.parseAccountId(s).chainId)===this.chainId).map(s=>this.parseAccountId(s).address),this.events.emit("accountsChanged",this.accounts)}getRpcConfig(t){var s,e;const i=(s=t?.chains)!=null?s:[],a=(e=t?.optionalChains)!=null?e:[],c=i.concat(a);if(!c.length)throw new Error("No chains specified in either `chains` or `optionalChains`");const l=i.length?t?.methods||m:[],r=i.length?t?.events||v:[],d=t?.optionalMethods||[],h=t?.optionalEvents||[],f=t?.rpcMap||this.buildRpcMap(c,t.projectId),E=t?.qrModalOptions||void 0;return{chains:i?.map(p=>this.formatChainId(p)),optionalChains:a.map(p=>this.formatChainId(p)),methods:l,events:r,optionalMethods:d,optionalEvents:h,rpcMap:f,showQrModal:!!(t!=null&&t.showQrModal),qrModalOptions:E,projectId:t.projectId,metadata:t.metadata}}buildRpcMap(t,s){const e={};return t.forEach(i=>{e[i]=this.getRpcUrl(i,s)}),e}async initialize(t){if(this.rpc=this.getRpcConfig(t),this.chainId=this.rpc.chains.length?C(this.rpc.chains):C(this.rpc.optionalChains),this.signer=await A.UniversalProvider.init({projectId:this.rpc.projectId,metadata:this.rpc.metadata,disableProviderPing:t.disableProviderPing,relayUrl:t.relayUrl,storage:t.storage,storageOptions:t.storageOptions,customStoragePrefix:t.customStoragePrefix,telemetryEnabled:t.telemetryEnabled,logger:t.logger}),this.registerEventListeners(),await this.loadPersistedSession(),this.rpc.showQrModal){let s;try{const{WalletConnectModal:e}=await Promise.resolve().then(function(){return T(require("@walletconnect/modal"))});s=e}catch{throw new Error("To use QR modal, please install @walletconnect/modal package")}if(s)try{this.modal=new s(g({projectId:this.rpc.projectId},this.rpc.qrModalOptions))}catch(e){throw this.signer.logger.error(e),new Error("Could not generate WalletConnectModal Instance")}}}loadConnectOpts(t){if(!t)return;const{chains:s,optionalChains:e,rpcMap:i}=t;s&&u.isValidArray(s)&&(this.rpc.chains=s.map(a=>this.formatChainId(a)),s.forEach(a=>{this.rpc.rpcMap[a]=i?.[a]||this.getRpcUrl(a)})),e&&u.isValidArray(e)&&(this.rpc.optionalChains=[],this.rpc.optionalChains=e?.map(a=>this.formatChainId(a)),e.forEach(a=>{this.rpc.rpcMap[a]=i?.[a]||this.getRpcUrl(a)}))}getRpcUrl(t,s){var e;return((e=this.rpc.rpcMap)==null?void 0:e[t])||`${N}?chainId=eip155:${t}&projectId=${s||this.rpc.projectId}`}async loadPersistedSession(){if(this.session)try{const t=await this.signer.client.core.storage.getItem(`${this.STORAGE_KEY}/chainId`),s=this.session.namespaces[`${this.namespace}:${t}`]?this.session.namespaces[`${this.namespace}:${t}`]:this.session.namespaces[this.namespace];this.setChainIds(t?[this.formatChainId(t)]:s?.accounts),this.setAccounts(s?.accounts)}catch(t){this.signer.logger.error("Failed to load persisted session, clearing state..."),this.signer.logger.error(t),await this.disconnect().catch(s=>this.signer.logger.warn(s))}}reset(){this.chainId=1,this.accounts=[]}persist(){this.session&&this.signer.client.core.storage.setItem(`${this.STORAGE_KEY}/chainId`,this.chainId)}parseAccounts(t){return typeof t=="string"||t instanceof String?[this.parseAccount(t)]:t.map(s=>this.parseAccount(s))}}const V=w;exports.EthereumProvider=V,exports.OPTIONAL_EVENTS=b,exports.OPTIONAL_METHODS=O,exports.REQUIRED_EVENTS=v,exports.REQUIRED_METHODS=m,exports.default=w;
//# sourceMappingURL=index.cjs.js.map
