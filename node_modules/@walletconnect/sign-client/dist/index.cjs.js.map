{"version":3,"file":"index.cjs.js","sources":["../src/constants/client.ts","../src/constants/history.ts","../src/constants/proposal.ts","../src/constants/session.ts","../src/constants/engine.ts","../src/constants/pendingRequest.ts","../src/constants/verify.ts","../src/constants/auth.ts","../src/controllers/engine.ts","../src/controllers/proposal.ts","../src/controllers/session.ts","../src/controllers/pendingRequest.ts","../src/controllers/authKey.ts","../src/controllers/authPairingTopic.ts","../src/controllers/authRequest.ts","../src/controllers/authStore.ts","../src/client.ts","../src/index.ts"],"sourcesContent":["import { SignClientTypes } from \"@walletconnect/types\";\n\nexport const SIGN_CLIENT_PROTOCOL = \"wc\";\nexport const SIGN_CLIENT_VERSION = 2;\nexport const SIGN_CLIENT_CONTEXT = \"client\";\n\nexport const SIGN_CLIENT_STORAGE_PREFIX = `${SIGN_CLIENT_PROTOCOL}@${SIGN_CLIENT_VERSION}:${SIGN_CLIENT_CONTEXT}:`;\n\nexport const SIGN_CLIENT_DEFAULT = {\n  name: SIGN_CLIENT_CONTEXT,\n  logger: \"error\",\n  controller: false,\n  relayUrl: \"wss://relay.walletconnect.org\",\n};\n\nexport const SIGN_CLIENT_EVENTS: Record<SignClientTypes.Event, SignClientTypes.Event> = {\n  session_proposal: \"session_proposal\",\n  session_update: \"session_update\",\n  session_extend: \"session_extend\",\n  session_ping: \"session_ping\",\n  session_delete: \"session_delete\",\n  session_expire: \"session_expire\",\n  session_request: \"session_request\",\n  session_request_sent: \"session_request_sent\",\n  session_event: \"session_event\",\n  proposal_expire: \"proposal_expire\",\n  session_authenticate: \"session_authenticate\",\n  session_request_expire: \"session_request_expire\",\n  session_connect: \"session_connect\",\n};\n\nexport const SIGN_CLIENT_STORAGE_OPTIONS = {\n  database: \":memory:\",\n};\n\nexport const WALLETCONNECT_DEEPLINK_CHOICE = \"WALLETCONNECT_DEEPLINK_CHOICE\";\n","export const HISTORY_EVENTS = {\n  created: \"history_created\",\n  updated: \"history_updated\",\n  deleted: \"history_deleted\",\n  sync: \"history_sync\",\n};\n\nexport const HISTORY_CONTEXT = \"history\";\n\nexport const HISTORY_STORAGE_VERSION = \"0.3\";\n","import { THIRTY_DAYS } from \"@walletconnect/time\";\n\nexport const PROPOSAL_CONTEXT = \"proposal\";\n\nexport const PROPOSAL_EXPIRY = THIRTY_DAYS;\n\nexport const PROPOSAL_EXPIRY_MESSAGE = \"Proposal expired\";\n","import { SEVEN_DAYS } from \"@walletconnect/time\";\n\nexport const SESSION_CONTEXT = \"session\";\n\nexport const SESSION_EXPIRY = SEVEN_DAYS;\n","import { FIVE_MINUTES, ONE_DAY, ONE_HOUR, SEVEN_DAYS } from \"@walletconnect/time\";\nimport { EngineTypes } from \"@walletconnect/types\";\n\nexport const ENGINE_CONTEXT = \"engine\";\n\nexport const ENGINE_RPC_OPTS: EngineTypes.RpcOptsMap = {\n  wc_sessionPropose: {\n    req: {\n      ttl: FIVE_MINUTES,\n      prompt: true,\n      tag: 1100,\n    },\n    res: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1101,\n    },\n    reject: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1120,\n    },\n    autoReject: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1121,\n    },\n  },\n  wc_sessionSettle: {\n    req: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1102,\n    },\n    res: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1103,\n    },\n  },\n  wc_sessionUpdate: {\n    req: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1104,\n    },\n    res: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1105,\n    },\n  },\n  wc_sessionExtend: {\n    req: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1106,\n    },\n    res: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1107,\n    },\n  },\n  wc_sessionRequest: {\n    req: {\n      ttl: FIVE_MINUTES,\n      prompt: true,\n      tag: 1108,\n    },\n    res: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1109,\n    },\n  },\n  wc_sessionEvent: {\n    req: {\n      ttl: FIVE_MINUTES,\n      prompt: true,\n      tag: 1110,\n    },\n    res: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1111,\n    },\n  },\n\n  wc_sessionDelete: {\n    req: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1112,\n    },\n    res: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1113,\n    },\n  },\n  wc_sessionPing: {\n    req: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1114,\n    },\n    res: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1115,\n    },\n  },\n  wc_sessionAuthenticate: {\n    req: {\n      ttl: ONE_HOUR,\n      prompt: true,\n      tag: 1116,\n    },\n    res: {\n      ttl: ONE_HOUR,\n      prompt: false,\n      tag: 1117,\n    },\n    reject: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1118,\n    },\n    autoReject: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1119,\n    },\n  },\n};\n\nexport const SESSION_REQUEST_EXPIRY_BOUNDARIES = {\n  min: FIVE_MINUTES,\n  max: SEVEN_DAYS,\n};\n\nexport const ENGINE_QUEUE_STATES: { idle: \"IDLE\"; active: \"ACTIVE\" } = {\n  idle: \"IDLE\",\n  active: \"ACTIVE\",\n};\n\nexport const TVF_METHODS = {\n  eth_sendTransaction: {\n    key: \"\",\n  },\n  eth_sendRawTransaction: {\n    key: \"\",\n  },\n  wallet_sendCalls: {\n    key: \"\",\n  },\n\n  solana_signTransaction: {\n    key: \"signature\",\n  },\n  solana_signAllTransactions: {\n    key: \"transactions\",\n  },\n  solana_signAndSendTransaction: {\n    key: \"signature\",\n  },\n};\n","export const REQUEST_CONTEXT = \"request\";\n","export const METHODS_TO_VERIFY = [\n  \"wc_sessionPropose\",\n  \"wc_sessionRequest\",\n  \"wc_authRequest\",\n  \"wc_sessionAuthenticate\",\n];\n","export const AUTH_PROTOCOL = \"wc\";\nexport const AUTH_VERSION = 1.5;\nexport const AUTH_CONTEXT = \"auth\";\nexport const AUTH_KEYS_CONTEXT = \"authKeys\";\nexport const AUTH_PAIRING_TOPIC_CONTEXT = \"pairingTopics\";\nexport const AUTH_REQUEST_CONTEXT = \"requests\";\n\nexport const AUTH_STORAGE_PREFIX = `${AUTH_PROTOCOL}@${AUTH_VERSION}:${AUTH_CONTEXT}:`;\nexport const AUTH_PUBLIC_KEY_NAME = `${AUTH_STORAGE_PREFIX}:PUB_KEY`;\n","/* eslint-disable no-console */\nimport {\n  EVENT_CLIENT_AUTHENTICATE_ERRORS,\n  EVENT_CLIENT_AUTHENTICATE_TRACES,\n  EVENT_CLIENT_PAIRING_ERRORS,\n  EVENT_CLIENT_PAIRING_TRACES,\n  EVENT_CLIENT_SESSION_ERRORS,\n  EVENT_CLIENT_SESSION_TRACES,\n  EXPIRER_EVENTS,\n  PAIRING_EVENTS,\n  RELAYER_DEFAULT_PROTOCOL,\n  RELAYER_EVENTS,\n  TRANSPORT_TYPES,\n  VERIFY_SERVER,\n} from \"@walletconnect/core\";\n\nimport {\n  formatJsonRpcError,\n  formatJsonRpcRequest,\n  formatJsonRpcResult,\n  payloadId,\n  isJsonRpcError,\n  isJsonRpcRequest,\n  isJsonRpcResponse,\n  isJsonRpcResult,\n  JsonRpcRequest,\n  ErrorResponse,\n  getBigIntRpcId,\n} from \"@walletconnect/jsonrpc-utils\";\nimport { FIVE_MINUTES, ONE_SECOND, toMiliseconds } from \"@walletconnect/time\";\nimport {\n  EnginePrivate,\n  EngineTypes,\n  ExpirerTypes,\n  IEngine,\n  IEngineEvents,\n  JsonRpcTypes,\n  PendingRequestTypes,\n  Verify,\n  CoreTypes,\n  ProposalTypes,\n  RelayerTypes,\n  SessionTypes,\n  PairingTypes,\n  AuthTypes,\n  EventClientTypes,\n} from \"@walletconnect/types\";\nimport {\n  calcExpiry,\n  createDelayedPromise,\n  engineEvent,\n  getInternalError,\n  getSdkError,\n  isConformingNamespaces,\n  isExpired,\n  isSessionCompatible,\n  isUndefined,\n  isValidController,\n  isValidErrorReason,\n  isValidEvent,\n  isValidId,\n  isValidNamespaces,\n  isValidNamespacesChainId,\n  isValidNamespacesEvent,\n  isValidNamespacesRequest,\n  isValidObject,\n  isValidParams,\n  isValidRelay,\n  isValidRelays,\n  isValidRequest,\n  isValidRequestExpiry,\n  hashMessage,\n  isValidRequiredNamespaces,\n  isValidResponse,\n  isValidString,\n  parseExpirerTarget,\n  TYPE_1,\n  TYPE_2,\n  handleDeeplinkRedirect,\n  MemoryStore,\n  getDeepLink,\n  hashKey,\n  getDidAddress,\n  formatMessage,\n  getMethodsFromRecap,\n  buildNamespacesFromAuth,\n  createEncodedRecap,\n  getChainsFromRecap,\n  mergeEncodedRecaps,\n  getRecapFromResources,\n  validateSignedCacao,\n  getNamespacedDidChainId,\n  parseChainId,\n  getLinkModeURL,\n  BASE64,\n  BASE64URL,\n  getSearchParamFromURL,\n  isReactNative,\n  isTestRun,\n  isValidArray,\n  extractSolanaTransactionId,\n} from \"@walletconnect/utils\";\nimport EventEmmiter from \"events\";\nimport {\n  ENGINE_CONTEXT,\n  ENGINE_RPC_OPTS,\n  PROPOSAL_EXPIRY_MESSAGE,\n  SESSION_EXPIRY,\n  SESSION_REQUEST_EXPIRY_BOUNDARIES,\n  METHODS_TO_VERIFY,\n  WALLETCONNECT_DEEPLINK_CHOICE,\n  ENGINE_QUEUE_STATES,\n  AUTH_PUBLIC_KEY_NAME,\n  TVF_METHODS,\n} from \"../constants\";\n\nexport class Engine extends IEngine {\n  public name = ENGINE_CONTEXT;\n\n  private events: IEngineEvents = new EventEmmiter();\n  private initialized = false;\n\n  /**\n   * Queue responsible for processing incoming requests such as session_update, session_event, session_ping etc\n   * It's needed when the client receives multiple requests at once from the mailbox immediately after initialization and to avoid attempting to process them all at the same time\n   */\n  private requestQueue: EngineTypes.EngineQueue<EngineTypes.EventCallback<JsonRpcRequest>> = {\n    state: ENGINE_QUEUE_STATES.idle,\n    queue: [],\n  };\n\n  /**\n   * Queue responsible for processing incoming session_request\n   * The queue emits the next request only after the previous one has been responded to\n   */\n  private sessionRequestQueue: EngineTypes.EngineQueue<PendingRequestTypes.Struct> = {\n    state: ENGINE_QUEUE_STATES.idle,\n    queue: [],\n  };\n\n  private requestQueueDelay = ONE_SECOND;\n  private expectedPairingMethodMap: Map<string, string[]> = new Map();\n  // Ephemeral (in-memory) map to store recently deleted items\n  private recentlyDeletedMap = new Map<\n    string | number,\n    \"pairing\" | \"session\" | \"proposal\" | \"request\"\n  >();\n\n  private recentlyDeletedLimit = 200;\n  private relayMessageCache: RelayerTypes.MessageEvent[] = [];\n  private pendingSessions: Map<\n    number,\n    {\n      sessionTopic: string;\n      pairingTopic: string;\n      proposalId: number;\n      publicKey: string;\n    }\n  > = new Map();\n\n  constructor(client: IEngine[\"client\"]) {\n    super(client);\n  }\n\n  public init: IEngine[\"init\"] = async () => {\n    if (!this.initialized) {\n      await this.cleanup();\n      this.registerRelayerEvents();\n      this.registerExpirerEvents();\n      this.registerPairingEvents();\n      await this.registerLinkModeListeners();\n      this.client.core.pairing.register({ methods: Object.keys(ENGINE_RPC_OPTS) });\n      this.initialized = true;\n      setTimeout(async () => {\n        await this.processPendingMessageEvents();\n\n        this.sessionRequestQueue.queue = this.getPendingSessionRequests();\n        this.processSessionRequestQueue();\n      }, toMiliseconds(this.requestQueueDelay));\n    }\n  };\n\n  private async processPendingMessageEvents() {\n    try {\n      const topics = this.client.session.keys;\n      const pendingMessages = this.client.core.relayer.messages.getWithoutAck(topics);\n      for (const [topic, messages] of Object.entries(pendingMessages)) {\n        for (const message of messages) {\n          try {\n            await this.onProviderMessageEvent({\n              topic,\n              message,\n              publishedAt: Date.now(),\n            });\n          } catch (error) {\n            this.client.logger.warn(\n              `Error processing pending message event for topic: ${topic}, message: ${message}`,\n            );\n          }\n        }\n      }\n    } catch (error) {\n      this.client.logger.warn(\"processPendingMessageEvents failed\", error);\n    }\n  }\n\n  // ---------- Public ------------------------------------------------ //\n\n  public connect: IEngine[\"connect\"] = async (params) => {\n    this.isInitialized();\n    await this.confirmOnlineStateOrThrow();\n    const connectParams = {\n      ...params,\n      requiredNamespaces: params.requiredNamespaces || {},\n      optionalNamespaces: params.optionalNamespaces || {},\n    };\n    await this.isValidConnect(connectParams);\n    const {\n      pairingTopic,\n      requiredNamespaces,\n      optionalNamespaces,\n      sessionProperties,\n      scopedProperties,\n      relays,\n    } = connectParams;\n    let topic = pairingTopic;\n    let uri: string | undefined;\n    let active = false;\n    try {\n      if (topic) {\n        const pairing = this.client.core.pairing.pairings.get(topic);\n        this.client.logger.warn(\n          \"connect() with existing pairing topic is deprecated and will be removed in the next major release.\",\n        );\n        active = pairing.active;\n      }\n    } catch (error) {\n      this.client.logger.error(`connect() -> pairing.get(${topic}) failed`);\n      throw error;\n    }\n    if (!topic || !active) {\n      const { topic: newTopic, uri: newUri } = await this.client.core.pairing.create();\n      topic = newTopic;\n      uri = newUri;\n    }\n    // safety check to ensure pairing topic is available\n    if (!topic) {\n      const { message } = getInternalError(\"NO_MATCHING_KEY\", `connect() pairing topic: ${topic}`);\n      throw new Error(message);\n    }\n\n    const publicKey = await this.client.core.crypto.generateKeyPair();\n\n    const expiry = ENGINE_RPC_OPTS.wc_sessionPropose.req.ttl || FIVE_MINUTES;\n    const expiryTimestamp = calcExpiry(expiry);\n    const proposal = {\n      requiredNamespaces,\n      optionalNamespaces,\n      relays: relays ?? [{ protocol: RELAYER_DEFAULT_PROTOCOL }],\n      proposer: {\n        publicKey,\n        metadata: this.client.metadata,\n      },\n      expiryTimestamp,\n      pairingTopic: topic,\n      ...(sessionProperties && { sessionProperties }),\n      ...(scopedProperties && { scopedProperties }),\n      id: payloadId(),\n    };\n    const sessionConnectTarget = engineEvent(\"session_connect\", proposal.id);\n\n    const {\n      reject,\n      resolve,\n      done: approval,\n    } = createDelayedPromise<SessionTypes.Struct>(expiry, PROPOSAL_EXPIRY_MESSAGE);\n\n    const proposalExpireHandler = ({ id }: { id: number }) => {\n      if (id === proposal.id) {\n        this.client.events.off(\"proposal_expire\", proposalExpireHandler);\n        this.pendingSessions.delete(proposal.id);\n        // emit the event to trigger reject, this approach automatically cleans up the .once listener below\n        this.events.emit(sessionConnectTarget, {\n          error: { message: PROPOSAL_EXPIRY_MESSAGE, code: 0 },\n        });\n      }\n    };\n\n    this.client.events.on(\"proposal_expire\", proposalExpireHandler);\n    this.events.once<\"session_connect\">(sessionConnectTarget, ({ error, session }) => {\n      this.client.events.off(\"proposal_expire\", proposalExpireHandler);\n      if (error) reject(error);\n      else if (session) {\n        resolve(session);\n      }\n    });\n\n    await this.sendRequest({\n      topic,\n      method: \"wc_sessionPropose\",\n      params: proposal,\n      throwOnFailedPublish: true,\n      clientRpcId: proposal.id,\n    });\n\n    await this.setProposal(proposal.id, proposal);\n    return { uri, approval };\n  };\n\n  public pair: IEngine[\"pair\"] = async (params) => {\n    this.isInitialized();\n    await this.confirmOnlineStateOrThrow();\n    try {\n      return await this.client.core.pairing.pair(params);\n    } catch (error) {\n      this.client.logger.error(\"pair() failed\");\n      throw error;\n    }\n  };\n\n  public approve: IEngine[\"approve\"] = async (params) => {\n    const configEvent = this.client.core.eventClient.createEvent({\n      properties: {\n        topic: params?.id?.toString(),\n        trace: [EVENT_CLIENT_SESSION_TRACES.session_approve_started],\n      },\n    });\n    try {\n      this.isInitialized();\n      await this.confirmOnlineStateOrThrow();\n    } catch (error) {\n      configEvent.setError(EVENT_CLIENT_SESSION_ERRORS.no_internet_connection);\n      throw error;\n    }\n    try {\n      await this.isValidProposalId(params?.id);\n    } catch (error) {\n      this.client.logger.error(`approve() -> proposal.get(${params?.id}) failed`);\n      configEvent.setError(EVENT_CLIENT_SESSION_ERRORS.proposal_not_found);\n      throw error;\n    }\n\n    try {\n      await this.isValidApprove(params);\n    } catch (error) {\n      this.client.logger.error(\"approve() -> isValidApprove() failed\");\n      configEvent.setError(\n        EVENT_CLIENT_SESSION_ERRORS.session_approve_namespace_validation_failure,\n      );\n      throw error;\n    }\n\n    const { id, relayProtocol, namespaces, sessionProperties, scopedProperties, sessionConfig } =\n      params;\n\n    const proposal = this.client.proposal.get(id);\n\n    this.client.core.eventClient.deleteEvent({ eventId: configEvent.eventId });\n\n    const { pairingTopic, proposer, requiredNamespaces, optionalNamespaces } = proposal;\n\n    let event = this.client.core.eventClient?.getEvent({\n      topic: pairingTopic,\n    }) as EventClientTypes.Event;\n    if (!event) {\n      event = this.client.core.eventClient?.createEvent({\n        type: EVENT_CLIENT_SESSION_TRACES.session_approve_started,\n        properties: {\n          topic: pairingTopic,\n          trace: [\n            EVENT_CLIENT_SESSION_TRACES.session_approve_started,\n            EVENT_CLIENT_SESSION_TRACES.session_namespaces_validation_success,\n          ],\n        },\n      });\n    }\n\n    const selfPublicKey = await this.client.core.crypto.generateKeyPair();\n    const peerPublicKey = proposer.publicKey;\n    const sessionTopic = await this.client.core.crypto.generateSharedKey(\n      selfPublicKey,\n      peerPublicKey,\n    );\n    const sessionSettle = {\n      relay: { protocol: relayProtocol ?? \"irn\" },\n      namespaces,\n      controller: { publicKey: selfPublicKey, metadata: this.client.metadata },\n      expiry: calcExpiry(SESSION_EXPIRY),\n      ...(sessionProperties && { sessionProperties }),\n      ...(scopedProperties && { scopedProperties }),\n      ...(sessionConfig && { sessionConfig }),\n    };\n    const transportType = TRANSPORT_TYPES.relay;\n    event.addTrace(EVENT_CLIENT_SESSION_TRACES.subscribing_session_topic);\n    try {\n      await this.client.core.relayer.subscribe(sessionTopic, { transportType });\n    } catch (error) {\n      event.setError(EVENT_CLIENT_SESSION_ERRORS.subscribe_session_topic_failure);\n      throw error;\n    }\n\n    event.addTrace(EVENT_CLIENT_SESSION_TRACES.subscribe_session_topic_success);\n\n    const session = {\n      ...sessionSettle,\n      topic: sessionTopic,\n      requiredNamespaces,\n      optionalNamespaces,\n      pairingTopic,\n      acknowledged: false,\n      self: sessionSettle.controller,\n      peer: {\n        publicKey: proposer.publicKey,\n        metadata: proposer.metadata,\n      },\n      controller: selfPublicKey,\n      transportType: TRANSPORT_TYPES.relay,\n    };\n    await this.client.session.set(sessionTopic, session);\n\n    event.addTrace(EVENT_CLIENT_SESSION_TRACES.store_session);\n\n    try {\n      event.addTrace(EVENT_CLIENT_SESSION_TRACES.publishing_session_settle);\n      await this.sendRequest({\n        topic: sessionTopic,\n        method: \"wc_sessionSettle\",\n        params: sessionSettle,\n        throwOnFailedPublish: true,\n      }).catch((error) => {\n        event?.setError(EVENT_CLIENT_SESSION_ERRORS.session_settle_publish_failure);\n        throw error;\n      });\n\n      event.addTrace(EVENT_CLIENT_SESSION_TRACES.session_settle_publish_success);\n\n      event.addTrace(EVENT_CLIENT_SESSION_TRACES.publishing_session_approve);\n      await this.sendResult<\"wc_sessionPropose\">({\n        id,\n        topic: pairingTopic,\n        result: {\n          relay: {\n            protocol: relayProtocol ?? \"irn\",\n          },\n          responderPublicKey: selfPublicKey,\n        },\n        throwOnFailedPublish: true,\n      }).catch((error) => {\n        event?.setError(EVENT_CLIENT_SESSION_ERRORS.session_approve_publish_failure);\n        throw error;\n      });\n\n      event.addTrace(EVENT_CLIENT_SESSION_TRACES.session_approve_publish_success);\n    } catch (error) {\n      this.client.logger.error(error);\n      // if the publish fails, delete the session and throw an error\n      this.client.session.delete(sessionTopic, getSdkError(\"USER_DISCONNECTED\"));\n      await this.client.core.relayer.unsubscribe(sessionTopic);\n      throw error;\n    }\n\n    this.client.core.eventClient.deleteEvent({ eventId: event.eventId });\n\n    await this.client.core.pairing.updateMetadata({\n      topic: pairingTopic,\n      metadata: proposer.metadata,\n    });\n    await this.client.proposal.delete(id, getSdkError(\"USER_DISCONNECTED\"));\n    await this.client.core.pairing.activate({ topic: pairingTopic });\n    await this.setExpiry(sessionTopic, calcExpiry(SESSION_EXPIRY));\n    return {\n      topic: sessionTopic,\n      acknowledged: () => Promise.resolve(this.client.session.get(sessionTopic)),\n    };\n  };\n\n  public reject: IEngine[\"reject\"] = async (params) => {\n    this.isInitialized();\n    await this.confirmOnlineStateOrThrow();\n    try {\n      await this.isValidReject(params);\n    } catch (error) {\n      this.client.logger.error(\"reject() -> isValidReject() failed\");\n      throw error;\n    }\n    const { id, reason } = params;\n    let pairingTopic;\n    try {\n      const proposal = this.client.proposal.get(id);\n      pairingTopic = proposal.pairingTopic;\n    } catch (error) {\n      this.client.logger.error(`reject() -> proposal.get(${id}) failed`);\n      throw error;\n    }\n\n    if (pairingTopic) {\n      await this.sendError({\n        id,\n        topic: pairingTopic,\n        error: reason,\n        rpcOpts: ENGINE_RPC_OPTS.wc_sessionPropose.reject,\n      });\n      await this.client.proposal.delete(id, getSdkError(\"USER_DISCONNECTED\"));\n    }\n  };\n\n  public update: IEngine[\"update\"] = async (params) => {\n    this.isInitialized();\n    await this.confirmOnlineStateOrThrow();\n    try {\n      await this.isValidUpdate(params);\n    } catch (error) {\n      this.client.logger.error(\"update() -> isValidUpdate() failed\");\n      throw error;\n    }\n    const { topic, namespaces } = params;\n\n    const { done: acknowledged, resolve, reject } = createDelayedPromise<void>();\n    const clientRpcId = payloadId();\n    const relayRpcId = getBigIntRpcId().toString() as any;\n\n    const oldNamespaces = this.client.session.get(topic).namespaces;\n    this.events.once(engineEvent(\"session_update\", clientRpcId), ({ error }: any) => {\n      if (error) reject(error);\n      else {\n        resolve();\n      }\n    });\n    // Update the session with the new namespaces, if the publish fails, revert to the old.\n    // This allows the client to use the updated session like emitting events\n    // without waiting for the peer to acknowledge\n    await this.client.session.update(topic, { namespaces });\n    await this.sendRequest({\n      topic,\n      method: \"wc_sessionUpdate\",\n      params: { namespaces },\n      throwOnFailedPublish: true,\n      clientRpcId,\n      relayRpcId,\n    }).catch((error) => {\n      this.client.logger.error(error);\n      this.client.session.update(topic, { namespaces: oldNamespaces });\n      reject(error);\n    });\n    return { acknowledged };\n  };\n\n  public extend: IEngine[\"extend\"] = async (params) => {\n    this.isInitialized();\n    await this.confirmOnlineStateOrThrow();\n    try {\n      await this.isValidExtend(params);\n    } catch (error) {\n      this.client.logger.error(\"extend() -> isValidExtend() failed\");\n      throw error;\n    }\n\n    const { topic } = params;\n    const clientRpcId = payloadId();\n    const { done: acknowledged, resolve, reject } = createDelayedPromise<void>();\n    this.events.once(engineEvent(\"session_extend\", clientRpcId), ({ error }: any) => {\n      if (error) reject(error);\n      else resolve();\n    });\n\n    await this.setExpiry(topic, calcExpiry(SESSION_EXPIRY));\n    this.sendRequest({\n      topic,\n      method: \"wc_sessionExtend\",\n      params: {},\n      clientRpcId,\n      throwOnFailedPublish: true,\n    }).catch((e) => {\n      reject(e);\n    });\n\n    return { acknowledged };\n  };\n\n  public request: IEngine[\"request\"] = async <T>(params: EngineTypes.RequestParams) => {\n    this.isInitialized();\n    try {\n      await this.isValidRequest(params);\n    } catch (error) {\n      this.client.logger.error(\"request() -> isValidRequest() failed\");\n      throw error;\n    }\n    const { chainId, request, topic, expiry = ENGINE_RPC_OPTS.wc_sessionRequest.req.ttl } = params;\n    const session = this.client.session.get(topic);\n\n    if (session?.transportType === TRANSPORT_TYPES.relay) {\n      await this.confirmOnlineStateOrThrow();\n    }\n    const clientRpcId = payloadId();\n    const relayRpcId = getBigIntRpcId().toString() as any;\n    const { done, resolve, reject } = createDelayedPromise<T>(\n      expiry,\n      \"Request expired. Please try again.\",\n    );\n    this.events.once<\"session_request\">(\n      engineEvent(\"session_request\", clientRpcId),\n      ({ error, result }) => {\n        if (error) reject(error);\n        else resolve(result);\n      },\n    );\n    const protocolMethod = \"wc_sessionRequest\";\n    const appLink = this.getAppLinkIfEnabled(session.peer.metadata, session.transportType);\n    if (appLink) {\n      await this.sendRequest({\n        clientRpcId,\n        relayRpcId,\n        topic,\n        method: protocolMethod,\n        params: {\n          request: {\n            ...request,\n            expiryTimestamp: calcExpiry(expiry),\n          },\n          chainId,\n        },\n        expiry,\n        throwOnFailedPublish: true,\n        appLink,\n      }).catch((error) => reject(error));\n\n      this.client.events.emit(\"session_request_sent\", {\n        topic,\n        request,\n        chainId,\n        id: clientRpcId,\n      });\n      const result = await done();\n      return result;\n    }\n\n    const protocolRequestParams: JsonRpcTypes.RequestParams[\"wc_sessionRequest\"] = {\n      request: {\n        ...request,\n        expiryTimestamp: calcExpiry(expiry),\n      },\n      chainId,\n    };\n    const shouldSetTVF = this.shouldSetTVF(protocolMethod, protocolRequestParams);\n\n    return await Promise.all([\n      new Promise<void>(async (resolve) => {\n        await this.sendRequest({\n          clientRpcId,\n          relayRpcId,\n          topic,\n          method: protocolMethod,\n          params: protocolRequestParams,\n          expiry,\n          throwOnFailedPublish: true,\n          ...(shouldSetTVF && {\n            tvf: this.getTVFParams(clientRpcId, protocolRequestParams),\n          }),\n        }).catch((error) => reject(error));\n        this.client.events.emit(\"session_request_sent\", {\n          topic,\n          request,\n          chainId,\n          id: clientRpcId,\n        });\n        resolve();\n      }),\n      new Promise<void>(async (resolve) => {\n        // only attempt to handle deeplinks if they are not explicitly disabled in the session config\n        if (!session.sessionConfig?.disableDeepLink) {\n          const wcDeepLink = (await getDeepLink(\n            this.client.core.storage,\n            WALLETCONNECT_DEEPLINK_CHOICE,\n          )) as string;\n          await handleDeeplinkRedirect({ id: clientRpcId, topic, wcDeepLink });\n        }\n        resolve();\n      }),\n      done(),\n    ]).then((result) => result[2]); // order is important here, we want to return the result of the `done` promise\n  };\n\n  public respond: IEngine[\"respond\"] = async (params) => {\n    this.isInitialized();\n    await this.isValidRespond(params);\n    const { topic, response } = params;\n    const { id } = response;\n    const session = this.client.session.get(topic);\n\n    if (session.transportType === TRANSPORT_TYPES.relay) {\n      await this.confirmOnlineStateOrThrow();\n    }\n\n    const appLink = this.getAppLinkIfEnabled(session.peer.metadata, session.transportType);\n    if (isJsonRpcResult(response)) {\n      await this.sendResult({\n        id,\n        topic,\n        result: response.result,\n        throwOnFailedPublish: true,\n        appLink,\n      });\n    } else if (isJsonRpcError(response)) {\n      await this.sendError({ id, topic, error: response.error, appLink });\n    }\n    this.cleanupAfterResponse(params);\n  };\n\n  public ping: IEngine[\"ping\"] = async (params) => {\n    this.isInitialized();\n    await this.confirmOnlineStateOrThrow();\n    try {\n      await this.isValidPing(params);\n    } catch (error) {\n      this.client.logger.error(\"ping() -> isValidPing() failed\");\n      throw error;\n    }\n    const { topic } = params;\n    if (this.client.session.keys.includes(topic)) {\n      const clientRpcId = payloadId();\n      const relayRpcId = getBigIntRpcId().toString() as any;\n      const { done, resolve, reject } = createDelayedPromise<void>();\n      this.events.once(engineEvent(\"session_ping\", clientRpcId), ({ error }: any) => {\n        if (error) reject(error);\n        else resolve();\n      });\n      await Promise.all([\n        this.sendRequest({\n          topic,\n          method: \"wc_sessionPing\",\n          params: {},\n          throwOnFailedPublish: true,\n          clientRpcId,\n          relayRpcId,\n        }),\n        done(),\n      ]);\n    } else if (this.client.core.pairing.pairings.keys.includes(topic)) {\n      this.client.logger.warn(\n        \"ping() on pairing topic is deprecated and will be removed in the next major release.\",\n      );\n      await this.client.core.pairing.ping({ topic });\n    }\n  };\n\n  public emit: IEngine[\"emit\"] = async (params) => {\n    this.isInitialized();\n    await this.confirmOnlineStateOrThrow();\n    await this.isValidEmit(params);\n    const { topic, event, chainId } = params;\n    const relayRpcId = getBigIntRpcId().toString() as any;\n    const clientRpcId = payloadId();\n    await this.sendRequest({\n      topic,\n      method: \"wc_sessionEvent\",\n      params: { event, chainId },\n      throwOnFailedPublish: true,\n      relayRpcId,\n      clientRpcId,\n    });\n  };\n\n  public disconnect: IEngine[\"disconnect\"] = async (params) => {\n    this.isInitialized();\n    await this.confirmOnlineStateOrThrow();\n    await this.isValidDisconnect(params);\n    const { topic } = params;\n    if (this.client.session.keys.includes(topic)) {\n      // await an ack to ensure the relay has received the disconnect request\n      await this.sendRequest({\n        topic,\n        method: \"wc_sessionDelete\",\n        params: getSdkError(\"USER_DISCONNECTED\"),\n        throwOnFailedPublish: true,\n      });\n      await this.deleteSession({ topic, emitEvent: false });\n    } else if (this.client.core.pairing.pairings.keys.includes(topic)) {\n      await this.client.core.pairing.disconnect({ topic });\n    } else {\n      const { message } = getInternalError(\n        \"MISMATCHED_TOPIC\",\n        `Session or pairing topic not found: ${topic}`,\n      );\n      throw new Error(message);\n    }\n  };\n\n  public find: IEngine[\"find\"] = (params) => {\n    this.isInitialized();\n    return this.client.session.getAll().filter((session) => isSessionCompatible(session, params));\n  };\n\n  public getPendingSessionRequests: IEngine[\"getPendingSessionRequests\"] = () => {\n    return this.client.pendingRequest.getAll();\n  };\n\n  // ---------- Auth ------------------------------------------------ //\n\n  public authenticate: IEngine[\"authenticate\"] = async (params, walletUniversalLink) => {\n    this.isInitialized();\n    this.isValidAuthenticate(params);\n\n    const isLinkMode =\n      walletUniversalLink &&\n      this.client.core.linkModeSupportedApps.includes(walletUniversalLink) &&\n      this.client.metadata.redirect?.linkMode;\n\n    const transportType: RelayerTypes.TransportType = isLinkMode\n      ? TRANSPORT_TYPES.link_mode\n      : TRANSPORT_TYPES.relay;\n\n    if (transportType === TRANSPORT_TYPES.relay) {\n      await this.confirmOnlineStateOrThrow();\n    }\n\n    const {\n      chains,\n      statement = \"\",\n      uri,\n      domain,\n      nonce,\n      type,\n      exp,\n      nbf,\n      methods = [],\n      expiry,\n    } = params;\n    // reassign resources to remove reference as the array is modified and might cause side effects\n    const resources = [...(params.resources || [])];\n\n    const { topic: pairingTopic, uri: connectionUri } = await this.client.core.pairing.create({\n      methods: [\"wc_sessionAuthenticate\"],\n      transportType,\n    });\n\n    this.client.logger.info({\n      message: \"Generated new pairing\",\n      pairing: { topic: pairingTopic, uri: connectionUri },\n    });\n\n    const publicKey = await this.client.core.crypto.generateKeyPair();\n    const responseTopic = hashKey(publicKey);\n\n    await Promise.all([\n      this.client.auth.authKeys.set(AUTH_PUBLIC_KEY_NAME, { responseTopic, publicKey }),\n      this.client.auth.pairingTopics.set(responseTopic, { topic: responseTopic, pairingTopic }),\n    ]);\n\n    // Subscribe to response topic\n    await this.client.core.relayer.subscribe(responseTopic, { transportType });\n\n    this.client.logger.info(`sending request to new pairing topic: ${pairingTopic}`);\n\n    if (methods.length > 0) {\n      const { namespace } = parseChainId(chains[0]);\n      let recap = createEncodedRecap(namespace, \"request\", methods);\n      const existingRecap = getRecapFromResources(resources);\n      if (existingRecap) {\n        // per Recaps spec, recap must occupy the last position in the resources array\n        // using .pop to remove the element given we already checked it's a recap and will replace it\n        const mergedRecap = mergeEncodedRecaps(recap, resources.pop() as string);\n        recap = mergedRecap;\n      }\n      resources.push(recap);\n    }\n\n    // Ensure the expiry is greater than the minimum required for the request - currently 1h\n    const authRequestExpiry =\n      expiry && expiry > ENGINE_RPC_OPTS.wc_sessionAuthenticate.req.ttl\n        ? expiry\n        : ENGINE_RPC_OPTS.wc_sessionAuthenticate.req.ttl;\n\n    const request: AuthTypes.SessionAuthenticateRequestParams = {\n      authPayload: {\n        type: type ?? \"caip122\",\n        chains,\n        statement,\n        aud: uri,\n        domain,\n        version: \"1\",\n        nonce,\n        iat: new Date().toISOString(),\n        exp,\n        nbf,\n        resources,\n      },\n      requester: { publicKey, metadata: this.client.metadata },\n      expiryTimestamp: calcExpiry(authRequestExpiry),\n    };\n\n    // ----- build namespaces for fallback session proposal ----- //\n    const namespaces = {\n      eip155: {\n        chains,\n        // request `personal_sign` method by default to allow for fallback siwe\n        methods: [...new Set([\"personal_sign\", ...methods])],\n        events: [\"chainChanged\", \"accountsChanged\"],\n      },\n    };\n\n    const proposal = {\n      requiredNamespaces: {},\n      optionalNamespaces: namespaces,\n      relays: [{ protocol: \"irn\" }],\n      pairingTopic,\n      proposer: {\n        publicKey,\n        metadata: this.client.metadata,\n      },\n      expiryTimestamp: calcExpiry(ENGINE_RPC_OPTS.wc_sessionPropose.req.ttl),\n      id: payloadId(),\n    };\n\n    const { done, resolve, reject } = createDelayedPromise(authRequestExpiry, \"Request expired\");\n\n    const authenticateId = payloadId();\n    const sessionConnectEventTarget = engineEvent(\"session_connect\", proposal.id);\n    const authenticateEventTarget = engineEvent(\"session_request\", authenticateId);\n\n    // handle fallback session proposal response\n    const onSessionConnect = async ({ error, session }: any) => {\n      // cleanup listener for authenticate response\n      this.events.off(authenticateEventTarget, onAuthenticate);\n      if (error) reject(error);\n      else if (session) {\n        resolve({\n          session,\n        });\n      }\n    };\n    // handle session authenticate response\n    const onAuthenticate = async (payload: any) => {\n      // delete this auth request on response\n      // we're using payload from the wallet to establish the session so we don't need to keep this around\n      await this.deletePendingAuthRequest(authenticateId, { message: \"fulfilled\", code: 0 });\n      if (payload.error) {\n        // wallets that do not support wc_sessionAuthenticate will return an error\n        // we should not reject the promise in this case as the fallback session proposal will be used\n        const error = getSdkError(\"WC_METHOD_UNSUPPORTED\", \"wc_sessionAuthenticate\");\n        if (payload.error.code === error.code) return;\n\n        // cleanup listener for fallback response\n        this.events.off(sessionConnectEventTarget, onSessionConnect);\n        return reject(payload.error.message);\n      }\n      // delete fallback proposal on successful authenticate as the proposal will not be responded to\n      await this.deleteProposal(proposal.id);\n      // cleanup listener for fallback response\n      this.events.off(sessionConnectEventTarget, onSessionConnect);\n\n      const {\n        cacaos,\n        responder,\n      }: {\n        cacaos: AuthTypes.SessionAuthenticateResponseParams[\"cacaos\"];\n        responder: AuthTypes.SessionAuthenticateResponseParams[\"responder\"];\n      } = payload.result;\n\n      const approvedMethods: string[] = [];\n      const approvedAccounts: string[] = [];\n      for (const cacao of cacaos) {\n        const isValid = await validateSignedCacao({ cacao, projectId: this.client.core.projectId });\n        if (!isValid) {\n          this.client.logger.error(cacao, \"Signature verification failed\");\n          reject(getSdkError(\"SESSION_SETTLEMENT_FAILED\", \"Signature verification failed\"));\n        }\n\n        const { p: payload } = cacao;\n        const recap = getRecapFromResources(payload.resources);\n\n        const approvedChains: string[] = [getNamespacedDidChainId(payload.iss) as string];\n        const parsedAddress = getDidAddress(payload.iss) as string;\n\n        if (recap) {\n          const methodsfromRecap = getMethodsFromRecap(recap);\n          const chainsFromRecap = getChainsFromRecap(recap);\n          approvedMethods.push(...methodsfromRecap);\n          approvedChains.push(...chainsFromRecap);\n        }\n\n        for (const chain of approvedChains) {\n          approvedAccounts.push(`${chain}:${parsedAddress}`);\n        }\n      }\n      const sessionTopic = await this.client.core.crypto.generateSharedKey(\n        publicKey,\n        responder.publicKey,\n      );\n\n      //create session object\n      let session: SessionTypes.Struct | undefined;\n\n      if (approvedMethods.length > 0) {\n        session = {\n          topic: sessionTopic,\n          acknowledged: true,\n          self: {\n            publicKey,\n            metadata: this.client.metadata,\n          },\n          peer: responder,\n          controller: responder.publicKey,\n          expiry: calcExpiry(SESSION_EXPIRY),\n          requiredNamespaces: {},\n          optionalNamespaces: {},\n          relay: { protocol: \"irn\" },\n          pairingTopic,\n          namespaces: buildNamespacesFromAuth(\n            [...new Set(approvedMethods)],\n            [...new Set(approvedAccounts)],\n          ),\n          transportType,\n        };\n\n        await this.client.core.relayer.subscribe(sessionTopic, { transportType });\n        await this.client.session.set(sessionTopic, session);\n        if (pairingTopic) {\n          await this.client.core.pairing.updateMetadata({\n            topic: pairingTopic,\n            metadata: responder.metadata,\n          });\n        }\n\n        session = this.client.session.get(sessionTopic);\n      }\n\n      if (\n        this.client.metadata.redirect?.linkMode &&\n        responder.metadata.redirect?.linkMode &&\n        responder.metadata.redirect?.universal &&\n        walletUniversalLink\n      ) {\n        // save wallet link in array of apps that support linkMode\n        this.client.core.addLinkModeSupportedApp(responder.metadata.redirect.universal);\n\n        this.client.session.update(sessionTopic, {\n          transportType: TRANSPORT_TYPES.link_mode,\n        });\n      }\n\n      resolve({\n        auths: cacaos,\n        session,\n      });\n    };\n\n    // subscribe to response events\n    this.events.once<\"session_connect\">(sessionConnectEventTarget, onSessionConnect);\n    this.events.once(authenticateEventTarget, onAuthenticate);\n\n    let linkModeURL;\n    try {\n      if (isLinkMode) {\n        const payload = formatJsonRpcRequest(\"wc_sessionAuthenticate\", request, authenticateId);\n        this.client.core.history.set(pairingTopic, payload);\n        const message = await this.client.core.crypto.encode(\"\", payload, {\n          type: TYPE_2,\n          encoding: BASE64URL,\n        });\n        linkModeURL = getLinkModeURL(walletUniversalLink, pairingTopic, message);\n      } else {\n        // send both (main & fallback) requests\n        await Promise.all([\n          this.sendRequest({\n            topic: pairingTopic,\n            method: \"wc_sessionAuthenticate\",\n            params: request,\n            expiry: params.expiry,\n            throwOnFailedPublish: true,\n            clientRpcId: authenticateId,\n          }),\n          this.sendRequest({\n            topic: pairingTopic,\n            method: \"wc_sessionPropose\",\n            params: proposal,\n            expiry: ENGINE_RPC_OPTS.wc_sessionPropose.req.ttl,\n            throwOnFailedPublish: true,\n            clientRpcId: proposal.id,\n          }),\n        ]);\n      }\n    } catch (error) {\n      // cleanup listeners on failed publish\n      this.events.off(sessionConnectEventTarget, onSessionConnect);\n      this.events.off(authenticateEventTarget, onAuthenticate);\n      throw error;\n    }\n\n    await this.setProposal(proposal.id, proposal);\n    await this.setAuthRequest(authenticateId, {\n      request: {\n        ...request,\n        verifyContext: {} as any,\n      },\n      pairingTopic,\n      transportType,\n    });\n\n    return {\n      uri: linkModeURL ?? connectionUri,\n      response: done,\n    } as EngineTypes.SessionAuthenticateResponsePromise;\n  };\n\n  public approveSessionAuthenticate: IEngine[\"approveSessionAuthenticate\"] = async (\n    sessionAuthenticateResponseParams,\n  ) => {\n    const { id, auths } = sessionAuthenticateResponseParams;\n\n    const event = this.client.core.eventClient.createEvent({\n      properties: {\n        topic: id.toString(),\n        trace: [EVENT_CLIENT_AUTHENTICATE_TRACES.authenticated_session_approve_started],\n      },\n    });\n\n    try {\n      this.isInitialized();\n    } catch (error) {\n      event.setError(EVENT_CLIENT_AUTHENTICATE_ERRORS.no_internet_connection);\n      throw error;\n    }\n\n    const pendingRequest = this.getPendingAuthRequest(id);\n\n    if (!pendingRequest) {\n      event.setError(\n        EVENT_CLIENT_AUTHENTICATE_ERRORS.authenticated_session_pending_request_not_found,\n      );\n      throw new Error(`Could not find pending auth request with id ${id}`);\n    }\n\n    const transportType = pendingRequest.transportType || TRANSPORT_TYPES.relay;\n    if (transportType === TRANSPORT_TYPES.relay) {\n      await this.confirmOnlineStateOrThrow();\n    }\n\n    const receiverPublicKey = pendingRequest.requester.publicKey;\n    const senderPublicKey = await this.client.core.crypto.generateKeyPair();\n    const responseTopic = hashKey(receiverPublicKey);\n\n    const encodeOpts = {\n      type: TYPE_1,\n      receiverPublicKey,\n      senderPublicKey,\n    };\n\n    const approvedMethods: string[] = [];\n    const approvedAccounts: string[] = [];\n    for (const cacao of auths) {\n      const isValid = await validateSignedCacao({ cacao, projectId: this.client.core.projectId });\n      if (!isValid) {\n        event.setError(EVENT_CLIENT_AUTHENTICATE_ERRORS.invalid_cacao);\n\n        const invalidErr = getSdkError(\n          \"SESSION_SETTLEMENT_FAILED\",\n          \"Signature verification failed\",\n        );\n\n        await this.sendError({\n          id,\n          topic: responseTopic,\n          error: invalidErr,\n          encodeOpts,\n        });\n\n        throw new Error(invalidErr.message);\n      }\n\n      event.addTrace(EVENT_CLIENT_AUTHENTICATE_TRACES.cacaos_verified);\n\n      const { p: payload } = cacao;\n      const recap = getRecapFromResources(payload.resources);\n\n      const approvedChains: string[] = [getNamespacedDidChainId(payload.iss) as string];\n\n      const parsedAddress = getDidAddress(payload.iss) as string;\n\n      if (recap) {\n        const methodsfromRecap = getMethodsFromRecap(recap);\n        const chainsFromRecap = getChainsFromRecap(recap);\n        approvedMethods.push(...methodsfromRecap);\n        approvedChains.push(...chainsFromRecap);\n      }\n      for (const chain of approvedChains) {\n        approvedAccounts.push(`${chain}:${parsedAddress}`);\n      }\n    }\n\n    const sessionTopic = await this.client.core.crypto.generateSharedKey(\n      senderPublicKey,\n      receiverPublicKey,\n    );\n\n    event.addTrace(EVENT_CLIENT_AUTHENTICATE_TRACES.create_authenticated_session_topic);\n\n    let session: SessionTypes.Struct | undefined;\n    if (approvedMethods?.length > 0) {\n      session = {\n        topic: sessionTopic,\n        acknowledged: true,\n        self: {\n          publicKey: senderPublicKey,\n          metadata: this.client.metadata,\n        },\n        peer: {\n          publicKey: receiverPublicKey,\n          metadata: pendingRequest.requester.metadata,\n        },\n        controller: receiverPublicKey,\n        expiry: calcExpiry(SESSION_EXPIRY),\n        authentication: auths,\n        requiredNamespaces: {},\n        optionalNamespaces: {},\n        relay: { protocol: \"irn\" },\n        pairingTopic: pendingRequest.pairingTopic,\n        namespaces: buildNamespacesFromAuth(\n          [...new Set(approvedMethods)],\n          [...new Set(approvedAccounts)],\n        ),\n        transportType,\n      };\n\n      event.addTrace(EVENT_CLIENT_AUTHENTICATE_TRACES.subscribing_authenticated_session_topic);\n\n      try {\n        await this.client.core.relayer.subscribe(sessionTopic, { transportType });\n      } catch (error) {\n        event.setError(\n          EVENT_CLIENT_AUTHENTICATE_ERRORS.subscribe_authenticated_session_topic_failure,\n        );\n        throw error;\n      }\n\n      event.addTrace(\n        EVENT_CLIENT_AUTHENTICATE_TRACES.subscribe_authenticated_session_topic_success,\n      );\n\n      await this.client.session.set(sessionTopic, session);\n\n      event.addTrace(EVENT_CLIENT_AUTHENTICATE_TRACES.store_authenticated_session);\n\n      await this.client.core.pairing.updateMetadata({\n        topic: pendingRequest.pairingTopic,\n        metadata: pendingRequest.requester.metadata,\n      });\n    }\n\n    event.addTrace(EVENT_CLIENT_AUTHENTICATE_TRACES.publishing_authenticated_session_approve);\n\n    try {\n      await this.sendResult<\"wc_sessionAuthenticate\">({\n        topic: responseTopic,\n        id,\n        result: {\n          cacaos: auths,\n          responder: {\n            publicKey: senderPublicKey,\n            metadata: this.client.metadata,\n          },\n        },\n        encodeOpts,\n        throwOnFailedPublish: true,\n        appLink: this.getAppLinkIfEnabled(pendingRequest.requester.metadata, transportType),\n      });\n    } catch (error) {\n      event.setError(\n        EVENT_CLIENT_AUTHENTICATE_ERRORS.authenticated_session_approve_publish_failure,\n      );\n      throw error;\n    }\n\n    await this.client.auth.requests.delete(id, { message: \"fulfilled\", code: 0 });\n    await this.client.core.pairing.activate({ topic: pendingRequest.pairingTopic });\n    this.client.core.eventClient.deleteEvent({ eventId: event.eventId });\n\n    return { session };\n  };\n\n  public rejectSessionAuthenticate: IEngine[\"rejectSessionAuthenticate\"] = async (params) => {\n    this.isInitialized();\n\n    const { id, reason } = params;\n\n    const pendingRequest = this.getPendingAuthRequest(id);\n\n    if (!pendingRequest) {\n      throw new Error(`Could not find pending auth request with id ${id}`);\n    }\n\n    if (pendingRequest.transportType === TRANSPORT_TYPES.relay) {\n      await this.confirmOnlineStateOrThrow();\n    }\n\n    const receiverPublicKey = pendingRequest.requester.publicKey;\n    const senderPublicKey = await this.client.core.crypto.generateKeyPair();\n    const responseTopic = hashKey(receiverPublicKey);\n\n    const encodeOpts = {\n      type: TYPE_1,\n      receiverPublicKey,\n      senderPublicKey,\n    };\n\n    await this.sendError({\n      id,\n      topic: responseTopic,\n      error: reason,\n      encodeOpts,\n      rpcOpts: ENGINE_RPC_OPTS.wc_sessionAuthenticate.reject,\n      appLink: this.getAppLinkIfEnabled(\n        pendingRequest.requester.metadata,\n        pendingRequest.transportType,\n      ),\n    });\n    await this.client.auth.requests.delete(id, { message: \"rejected\", code: 0 });\n    await this.client.proposal.delete(id, getSdkError(\"USER_DISCONNECTED\"));\n  };\n\n  public formatAuthMessage: IEngine[\"formatAuthMessage\"] = (params) => {\n    this.isInitialized();\n    const { request, iss } = params;\n    return formatMessage(request, iss);\n  };\n\n  public processRelayMessageCache: IEngine[\"processRelayMessageCache\"] = () => {\n    // process the relay messages cache in the next tick to allow event listeners to be registered by the implementing app\n    setTimeout(async () => {\n      if (this.relayMessageCache.length === 0) return;\n      while (this.relayMessageCache.length > 0) {\n        try {\n          const message = this.relayMessageCache.shift();\n          if (message) {\n            await this.onRelayMessage(message);\n          }\n        } catch (error) {\n          this.client.logger.error(error);\n        }\n      }\n    }, 50);\n  };\n\n  // ---------- Private Helpers --------------------------------------- //\n\n  private cleanupDuplicatePairings: EnginePrivate[\"cleanupDuplicatePairings\"] = async (\n    session: SessionTypes.Struct,\n  ) => {\n    // older SDK versions are missing the `pairingTopic` prop thus we need to check for it\n    if (!session.pairingTopic) return;\n\n    try {\n      const pairing = this.client.core.pairing.pairings.get(session.pairingTopic);\n      const allPairings = this.client.core.pairing.pairings.getAll();\n      const duplicates = allPairings.filter(\n        (p) =>\n          p.peerMetadata?.url &&\n          p.peerMetadata?.url === session.peer.metadata.url &&\n          p.topic &&\n          p.topic !== pairing.topic,\n      );\n      if (duplicates.length === 0) return;\n      this.client.logger.info(`Cleaning up ${duplicates.length} duplicate pairing(s)`);\n      await Promise.all(\n        duplicates.map((p) => this.client.core.pairing.disconnect({ topic: p.topic })),\n      );\n      this.client.logger.info(`Duplicate pairings clean up finished`);\n    } catch (error) {\n      this.client.logger.error(error);\n    }\n  };\n\n  private deleteSession: EnginePrivate[\"deleteSession\"] = async (params) => {\n    const { topic, expirerHasDeleted = false, emitEvent = true, id = 0 } = params;\n    const { self } = this.client.session.get(topic);\n    // Await the unsubscribe first to avoid deleting the symKey too early below.\n    await this.client.core.relayer.unsubscribe(topic);\n    await this.client.session.delete(topic, getSdkError(\"USER_DISCONNECTED\"));\n    this.addToRecentlyDeleted(topic, \"session\");\n    if (this.client.core.crypto.keychain.has(self.publicKey)) {\n      await this.client.core.crypto.deleteKeyPair(self.publicKey);\n    }\n    if (this.client.core.crypto.keychain.has(topic)) {\n      await this.client.core.crypto.deleteSymKey(topic);\n    }\n    if (!expirerHasDeleted) this.client.core.expirer.del(topic);\n    // remove any deeplinks from storage after the session is deleted\n    // to avoid navigating to incorrect deeplink later on\n    this.client.core.storage\n      .removeItem(WALLETCONNECT_DEEPLINK_CHOICE)\n      .catch((e) => this.client.logger.warn(e));\n    this.getPendingSessionRequests().forEach((r) => {\n      if (r.topic === topic) {\n        this.deletePendingSessionRequest(r.id, getSdkError(\"USER_DISCONNECTED\"));\n      }\n    });\n    // reset the queue state back to idle if a request for the deleted session is still in the queue\n    if (topic === this.sessionRequestQueue.queue[0]?.topic) {\n      this.sessionRequestQueue.state = ENGINE_QUEUE_STATES.idle;\n    }\n    if (emitEvent) this.client.events.emit(\"session_delete\", { id, topic });\n  };\n\n  private deleteProposal: EnginePrivate[\"deleteProposal\"] = async (id, expirerHasDeleted) => {\n    if (expirerHasDeleted) {\n      try {\n        const proposal = this.client.proposal.get(id);\n        const event = this.client.core.eventClient.getEvent({ topic: proposal.pairingTopic });\n        event?.setError(EVENT_CLIENT_SESSION_ERRORS.proposal_expired);\n      } catch (error) {}\n    }\n    await Promise.all([\n      this.client.proposal.delete(id, getSdkError(\"USER_DISCONNECTED\")),\n      expirerHasDeleted ? Promise.resolve() : this.client.core.expirer.del(id),\n    ]);\n    this.addToRecentlyDeleted(id, \"proposal\");\n  };\n\n  private deletePendingSessionRequest: EnginePrivate[\"deletePendingSessionRequest\"] = async (\n    id,\n    reason,\n    expirerHasDeleted = false,\n  ) => {\n    await Promise.all([\n      this.client.pendingRequest.delete(id, reason),\n      expirerHasDeleted ? Promise.resolve() : this.client.core.expirer.del(id),\n    ]);\n    this.addToRecentlyDeleted(id, \"request\");\n    this.sessionRequestQueue.queue = this.sessionRequestQueue.queue.filter((r) => r.id !== id);\n    if (expirerHasDeleted) {\n      this.sessionRequestQueue.state = ENGINE_QUEUE_STATES.idle;\n      this.client.events.emit(\"session_request_expire\", { id });\n    }\n  };\n\n  private deletePendingAuthRequest: EnginePrivate[\"deletePendingAuthRequest\"] = async (\n    id,\n    reason,\n    expirerHasDeleted = false,\n  ) => {\n    await Promise.all([\n      this.client.auth.requests.delete(id, reason),\n      expirerHasDeleted ? Promise.resolve() : this.client.core.expirer.del(id),\n    ]);\n  };\n\n  private setExpiry: EnginePrivate[\"setExpiry\"] = async (topic, expiry) => {\n    if (!this.client.session.keys.includes(topic)) return;\n    this.client.core.expirer.set(topic, expiry);\n    await this.client.session.update(topic, { expiry });\n  };\n\n  private setProposal: EnginePrivate[\"setProposal\"] = async (id, proposal) => {\n    this.client.core.expirer.set(id, calcExpiry(ENGINE_RPC_OPTS.wc_sessionPropose.req.ttl));\n    await this.client.proposal.set(id, proposal);\n  };\n\n  private setAuthRequest: EnginePrivate[\"setAuthRequest\"] = async (id, params) => {\n    const { request, pairingTopic, transportType = TRANSPORT_TYPES.relay } = params;\n    this.client.core.expirer.set(id, request.expiryTimestamp);\n    await this.client.auth.requests.set(id, {\n      authPayload: request.authPayload,\n      requester: request.requester,\n      expiryTimestamp: request.expiryTimestamp,\n      id,\n      pairingTopic,\n      verifyContext: request.verifyContext,\n      transportType,\n    });\n  };\n\n  private setPendingSessionRequest: EnginePrivate[\"setPendingSessionRequest\"] = async (\n    pendingRequest: PendingRequestTypes.Struct,\n  ) => {\n    const { id, topic, params, verifyContext } = pendingRequest;\n    const expiry =\n      params.request.expiryTimestamp || calcExpiry(ENGINE_RPC_OPTS.wc_sessionRequest.req.ttl);\n    this.client.core.expirer.set(id, expiry);\n    await this.client.pendingRequest.set(id, {\n      id,\n      topic,\n      params,\n      verifyContext,\n    });\n  };\n\n  private sendRequest: EnginePrivate[\"sendRequest\"] = async (args) => {\n    const {\n      topic,\n      method,\n      params,\n      expiry,\n      relayRpcId,\n      clientRpcId,\n      throwOnFailedPublish,\n      appLink,\n      tvf,\n    } = args;\n    const payload = formatJsonRpcRequest(method, params, clientRpcId);\n\n    let message: string;\n    const isLinkMode = !!appLink;\n\n    try {\n      const encoding = isLinkMode ? BASE64URL : BASE64;\n      message = await this.client.core.crypto.encode(topic, payload, { encoding });\n    } catch (error) {\n      await this.cleanup();\n      this.client.logger.error(`sendRequest() -> core.crypto.encode() for topic ${topic} failed`);\n      throw error;\n    }\n\n    let attestation: string | undefined;\n    if (METHODS_TO_VERIFY.includes(method)) {\n      const decryptedId = hashMessage(JSON.stringify(payload));\n      const id = hashMessage(message);\n      attestation = await this.client.core.verify.register({ id, decryptedId });\n    }\n    const opts = ENGINE_RPC_OPTS[method].req;\n    opts.attestation = attestation;\n    if (expiry) opts.ttl = expiry;\n    if (relayRpcId) opts.id = relayRpcId;\n    this.client.core.history.set(topic, payload);\n\n    if (isLinkMode) {\n      const redirectURL = getLinkModeURL(appLink, topic, message);\n      await (global as any).Linking.openURL(redirectURL, this.client.name);\n    } else {\n      const opts = ENGINE_RPC_OPTS[method].req;\n      if (expiry) opts.ttl = expiry;\n      if (relayRpcId) opts.id = relayRpcId;\n\n      opts.tvf = {\n        ...tvf,\n        correlationId: payload.id,\n      };\n\n      if (throwOnFailedPublish) {\n        opts.internal = {\n          ...opts.internal,\n          throwOnFailedPublish: true,\n        };\n        await this.client.core.relayer.publish(topic, message, opts);\n      } else {\n        this.client.core.relayer\n          .publish(topic, message, opts)\n          .catch((error) => this.client.logger.error(error));\n      }\n    }\n\n    return payload.id;\n  };\n\n  private sendResult: EnginePrivate[\"sendResult\"] = async (args) => {\n    const { id, topic, result, throwOnFailedPublish, encodeOpts, appLink } = args;\n    const payload = formatJsonRpcResult(id, result);\n    let message;\n    const isLinkMode = appLink && typeof (global as any)?.Linking !== \"undefined\";\n\n    try {\n      const encoding = isLinkMode ? BASE64URL : BASE64;\n      message = await this.client.core.crypto.encode(topic, payload, {\n        ...(encodeOpts || {}),\n        encoding,\n      });\n    } catch (error) {\n      // if encoding fails e.g. due to missing keychain, we want to cleanup all related data as its unusable\n      await this.cleanup();\n      this.client.logger.error(`sendResult() -> core.crypto.encode() for topic ${topic} failed`);\n      throw error;\n    }\n    let record;\n    let tvf;\n    try {\n      record = await this.client.core.history.get(topic, id);\n      const request = record.request;\n      try {\n        if (this.shouldSetTVF(request.method as JsonRpcTypes.WcMethod, request.params)) {\n          tvf = this.getTVFParams(id, request.params, result);\n        }\n      } catch (error) {\n        this.client.logger.warn(`sendResult() -> getTVFParams() failed`, error);\n      }\n    } catch (error) {\n      this.client.logger.error(`sendResult() -> history.get(${topic}, ${id}) failed`);\n      throw error;\n    }\n\n    if (isLinkMode) {\n      const redirectURL = getLinkModeURL(appLink, topic, message);\n      await (global as any).Linking.openURL(redirectURL, this.client.name);\n    } else {\n      const method = record.request.method as JsonRpcTypes.WcMethod;\n      const opts = ENGINE_RPC_OPTS[method].res;\n\n      opts.tvf = {\n        ...tvf,\n        correlationId: id,\n      };\n\n      if (throwOnFailedPublish) {\n        opts.internal = {\n          ...opts.internal,\n          throwOnFailedPublish: true,\n        };\n        await this.client.core.relayer.publish(topic, message, opts);\n      } else {\n        this.client.core.relayer\n          .publish(topic, message, opts)\n          .catch((error) => this.client.logger.error(error));\n      }\n    }\n\n    await this.client.core.history.resolve(payload);\n  };\n\n  private sendError: EnginePrivate[\"sendError\"] = async (params) => {\n    const { id, topic, error, encodeOpts, rpcOpts, appLink } = params;\n    const payload = formatJsonRpcError(id, error);\n    let message;\n    const isLinkMode = appLink && typeof (global as any)?.Linking !== \"undefined\";\n    try {\n      const encoding = isLinkMode ? BASE64URL : BASE64;\n      message = await this.client.core.crypto.encode(topic, payload, {\n        ...(encodeOpts || {}),\n        encoding,\n      });\n    } catch (error) {\n      await this.cleanup();\n      this.client.logger.error(`sendError() -> core.crypto.encode() for topic ${topic} failed`);\n      throw error;\n    }\n    let record;\n    try {\n      record = await this.client.core.history.get(topic, id);\n    } catch (error) {\n      this.client.logger.error(`sendError() -> history.get(${topic}, ${id}) failed`);\n      throw error;\n    }\n\n    if (isLinkMode) {\n      const redirectURL = getLinkModeURL(appLink, topic, message);\n      await (global as any).Linking.openURL(redirectURL, this.client.name);\n    } else {\n      const method = record.request.method as JsonRpcTypes.WcMethod;\n      const opts = rpcOpts || ENGINE_RPC_OPTS[method].res;\n      // await is intentionally omitted to speed up performance\n      this.client.core.relayer.publish(topic, message, opts);\n    }\n\n    await this.client.core.history.resolve(payload);\n  };\n\n  private cleanup: EnginePrivate[\"cleanup\"] = async () => {\n    const sessionTopics: string[] = [];\n    const proposalIds: number[] = [];\n    this.client.session.getAll().forEach((session) => {\n      let toCleanup = false;\n      if (isExpired(session.expiry)) toCleanup = true;\n      if (!this.client.core.crypto.keychain.has(session.topic)) toCleanup = true;\n      if (toCleanup) sessionTopics.push(session.topic);\n    });\n    this.client.proposal.getAll().forEach((proposal) => {\n      if (isExpired(proposal.expiryTimestamp)) proposalIds.push(proposal.id);\n    });\n    await Promise.all([\n      ...sessionTopics.map((topic) => this.deleteSession({ topic })),\n      ...proposalIds.map((id) => this.deleteProposal(id)),\n    ]);\n  };\n\n  private isInitialized() {\n    if (!this.initialized) {\n      const { message } = getInternalError(\"NOT_INITIALIZED\", this.name);\n      throw new Error(message);\n    }\n  }\n\n  private async confirmOnlineStateOrThrow() {\n    await this.client.core.relayer.confirmOnlineStateOrThrow();\n  }\n\n  // ---------- Relay Events Router ----------------------------------- //\n\n  private registerRelayerEvents() {\n    this.client.core.relayer.on(RELAYER_EVENTS.message, (event: RelayerTypes.MessageEvent) => {\n      this.onProviderMessageEvent(event);\n    });\n  }\n\n  private onProviderMessageEvent = async (event: RelayerTypes.MessageEvent) => {\n    // capture any messages that arrive before the client is initialized so we can process them after initialization is complete\n    if (!this.initialized || this.relayMessageCache.length > 0) {\n      this.relayMessageCache.push(event);\n    } else {\n      await this.onRelayMessage(event);\n    }\n  };\n\n  private async onRelayMessage(event: RelayerTypes.MessageEvent) {\n    const { topic, message, attestation, transportType } = event;\n\n    // Retrieve the public key (if defined) to decrypt possible `auth_request` response\n    const { publicKey } = this.client.auth.authKeys.keys.includes(AUTH_PUBLIC_KEY_NAME)\n      ? this.client.auth.authKeys.get(AUTH_PUBLIC_KEY_NAME)\n      : ({ responseTopic: undefined, publicKey: undefined } as any);\n\n    try {\n      const payload = await this.client.core.crypto.decode(topic, message, {\n        receiverPublicKey: publicKey,\n        encoding: transportType === TRANSPORT_TYPES.link_mode ? BASE64URL : BASE64,\n      });\n\n      if (isJsonRpcRequest(payload)) {\n        this.client.core.history.set(topic, payload);\n        await this.onRelayEventRequest({\n          topic,\n          payload,\n          attestation,\n          transportType,\n          encryptedId: hashMessage(message),\n        });\n      } else if (isJsonRpcResponse(payload)) {\n        await this.client.core.history.resolve(payload);\n        await this.onRelayEventResponse({ topic, payload, transportType });\n        this.client.core.history.delete(topic, payload.id);\n      } else {\n        await this.onRelayEventUnknownPayload({ topic, payload, transportType });\n      }\n      await this.client.core.relayer.messages.ack(topic, message);\n    } catch (error) {\n      this.client.logger.error(error);\n    }\n  }\n\n  private onRelayEventRequest: EnginePrivate[\"onRelayEventRequest\"] = async (event) => {\n    this.requestQueue.queue.push(event);\n    await this.processRequestsQueue();\n  };\n\n  private processRequestsQueue = async () => {\n    if (this.requestQueue.state === ENGINE_QUEUE_STATES.active) {\n      this.client.logger.info(`Request queue already active, skipping...`);\n      return;\n    }\n\n    this.client.logger.info(\n      `Request queue starting with ${this.requestQueue.queue.length} requests`,\n    );\n\n    while (this.requestQueue.queue.length > 0) {\n      this.requestQueue.state = ENGINE_QUEUE_STATES.active;\n      const request = this.requestQueue.queue.shift();\n      if (!request) continue;\n\n      try {\n        await this.processRequest(request);\n      } catch (error) {\n        this.client.logger.warn(error);\n      }\n    }\n    this.requestQueue.state = ENGINE_QUEUE_STATES.idle;\n  };\n\n  private processRequest: EnginePrivate[\"onRelayEventRequest\"] = async (event) => {\n    const { topic, payload, attestation, transportType, encryptedId } = event;\n\n    const reqMethod = payload.method as JsonRpcTypes.WcMethod;\n\n    if (this.shouldIgnorePairingRequest({ topic, requestMethod: reqMethod })) {\n      return;\n    }\n\n    switch (reqMethod) {\n      case \"wc_sessionPropose\":\n        return await this.onSessionProposeRequest({ topic, payload, attestation, encryptedId });\n      case \"wc_sessionSettle\":\n        return await this.onSessionSettleRequest(topic, payload);\n      case \"wc_sessionUpdate\":\n        return await this.onSessionUpdateRequest(topic, payload);\n      case \"wc_sessionExtend\":\n        return await this.onSessionExtendRequest(topic, payload);\n      case \"wc_sessionPing\":\n        return await this.onSessionPingRequest(topic, payload);\n      case \"wc_sessionDelete\":\n        return await this.onSessionDeleteRequest(topic, payload);\n      case \"wc_sessionRequest\":\n        return await this.onSessionRequest({\n          topic,\n          payload,\n          attestation,\n          encryptedId,\n          transportType,\n        });\n      case \"wc_sessionEvent\":\n        return await this.onSessionEventRequest(topic, payload);\n      case \"wc_sessionAuthenticate\":\n        return await this.onSessionAuthenticateRequest({\n          topic,\n          payload,\n          attestation,\n          encryptedId,\n          transportType,\n        });\n      default:\n        return this.client.logger.info(`Unsupported request method ${reqMethod}`);\n    }\n  };\n\n  private onRelayEventResponse: EnginePrivate[\"onRelayEventResponse\"] = async (event) => {\n    const { topic, payload, transportType } = event;\n    const record = await this.client.core.history.get(topic, payload.id);\n    const resMethod = record.request.method as JsonRpcTypes.WcMethod;\n\n    switch (resMethod) {\n      case \"wc_sessionPropose\":\n        return this.onSessionProposeResponse(topic, payload, transportType);\n      case \"wc_sessionSettle\":\n        return this.onSessionSettleResponse(topic, payload);\n      case \"wc_sessionUpdate\":\n        return this.onSessionUpdateResponse(topic, payload);\n      case \"wc_sessionExtend\":\n        return this.onSessionExtendResponse(topic, payload);\n      case \"wc_sessionPing\":\n        return this.onSessionPingResponse(topic, payload);\n      case \"wc_sessionRequest\":\n        return this.onSessionRequestResponse(topic, payload);\n      case \"wc_sessionAuthenticate\":\n        return this.onSessionAuthenticateResponse(topic, payload);\n      default:\n        return this.client.logger.info(`Unsupported response method ${resMethod}`);\n    }\n  };\n\n  private onRelayEventUnknownPayload: EnginePrivate[\"onRelayEventUnknownPayload\"] = (event) => {\n    const { topic } = event;\n    const { message } = getInternalError(\n      \"MISSING_OR_INVALID\",\n      `Decoded payload on topic ${topic} is not identifiable as a JSON-RPC request or a response.`,\n    );\n    throw new Error(message);\n  };\n\n  private shouldIgnorePairingRequest: EnginePrivate[\"shouldIgnorePairingRequest\"] = (params) => {\n    const { topic, requestMethod } = params;\n    const expectedMethods = this.expectedPairingMethodMap.get(topic);\n    // check if the request method matches the expected method\n    if (!expectedMethods) return false;\n    if (expectedMethods.includes(requestMethod)) return false;\n\n    /**\n     * we want to make sure fallback session proposal is ignored only if there are subscribers\n     * for the `session_authenticate` event, otherwise this would result in no-op for the user\n     */\n    if (expectedMethods.includes(\"wc_sessionAuthenticate\")) {\n      if (this.client.events.listenerCount(\"session_authenticate\") > 0) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  // ---------- Relay Events Handlers --------------------------------- //\n\n  private onSessionProposeRequest: EnginePrivate[\"onSessionProposeRequest\"] = async (args) => {\n    const { topic, payload, attestation, encryptedId } = args;\n    const { params, id } = payload;\n    try {\n      const event = this.client.core.eventClient.getEvent({ topic });\n\n      if (this.client.events.listenerCount(\"session_proposal\") === 0) {\n        console.warn(\"No listener for session_proposal event\");\n        event?.setError(EVENT_CLIENT_PAIRING_ERRORS.proposal_listener_not_found);\n      }\n\n      this.isValidConnect({ ...payload.params });\n      const expiryTimestamp =\n        params.expiryTimestamp || calcExpiry(ENGINE_RPC_OPTS.wc_sessionPropose.req.ttl);\n      const proposal = { id, pairingTopic: topic, expiryTimestamp, ...params };\n      await this.setProposal(id, proposal);\n\n      const verifyContext = await this.getVerifyContext({\n        attestationId: attestation,\n        hash: hashMessage(JSON.stringify(payload)),\n        encryptedId,\n        metadata: proposal.proposer.metadata,\n      });\n\n      event?.addTrace(EVENT_CLIENT_PAIRING_TRACES.emit_session_proposal);\n\n      this.client.events.emit(\"session_proposal\", { id, params: proposal, verifyContext });\n    } catch (err: any) {\n      await this.sendError({\n        id,\n        topic,\n        error: err,\n        rpcOpts: ENGINE_RPC_OPTS.wc_sessionPropose.autoReject,\n      });\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionProposeResponse: EnginePrivate[\"onSessionProposeResponse\"] = async (\n    topic,\n    payload,\n    transportType,\n  ) => {\n    const { id } = payload;\n    if (isJsonRpcResult(payload)) {\n      const { result } = payload;\n      this.client.logger.trace({ type: \"method\", method: \"onSessionProposeResponse\", result });\n      const proposal = this.client.proposal.get(id);\n      this.client.logger.trace({ type: \"method\", method: \"onSessionProposeResponse\", proposal });\n      const selfPublicKey = proposal.proposer.publicKey;\n      this.client.logger.trace({\n        type: \"method\",\n        method: \"onSessionProposeResponse\",\n        selfPublicKey,\n      });\n      const peerPublicKey = result.responderPublicKey;\n      this.client.logger.trace({\n        type: \"method\",\n        method: \"onSessionProposeResponse\",\n        peerPublicKey,\n      });\n      const sessionTopic = await this.client.core.crypto.generateSharedKey(\n        selfPublicKey,\n        peerPublicKey,\n      );\n      this.pendingSessions.set(id, {\n        sessionTopic,\n        pairingTopic: topic,\n        proposalId: id,\n        publicKey: selfPublicKey,\n      });\n\n      const subscriptionId = await this.client.core.relayer.subscribe(sessionTopic, {\n        transportType,\n      });\n      this.client.logger.trace({\n        type: \"method\",\n        method: \"onSessionProposeResponse\",\n        subscriptionId,\n      });\n      await this.client.core.pairing.activate({ topic });\n    } else if (isJsonRpcError(payload)) {\n      await this.client.proposal.delete(id, getSdkError(\"USER_DISCONNECTED\"));\n      const target = engineEvent(\"session_connect\", id);\n      const listeners = this.events.listenerCount(target);\n      if (listeners === 0) {\n        throw new Error(`emitting ${target} without any listeners, 954`);\n      }\n      this.events.emit(target, { error: payload.error });\n    }\n  };\n\n  private onSessionSettleRequest: EnginePrivate[\"onSessionSettleRequest\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { id, params } = payload;\n    try {\n      this.isValidSessionSettleRequest(params);\n      const {\n        relay,\n        controller,\n        expiry,\n        namespaces,\n        sessionProperties,\n        scopedProperties,\n        sessionConfig,\n      } = payload.params;\n      const pendingSession = [...this.pendingSessions.values()].find(\n        (s) => s.sessionTopic === topic,\n      );\n\n      if (!pendingSession) {\n        return this.client.logger.error(`Pending session not found for topic ${topic}`);\n      }\n\n      const proposal = this.client.proposal.get(pendingSession.proposalId);\n\n      const session: SessionTypes.Struct = {\n        topic,\n        relay,\n        expiry,\n        namespaces,\n        acknowledged: true,\n        pairingTopic: pendingSession.pairingTopic,\n        requiredNamespaces: proposal.requiredNamespaces,\n        optionalNamespaces: proposal.optionalNamespaces,\n        controller: controller.publicKey,\n        self: {\n          publicKey: pendingSession.publicKey,\n          metadata: this.client.metadata,\n        },\n        peer: {\n          publicKey: controller.publicKey,\n          metadata: controller.metadata,\n        },\n        ...(sessionProperties && { sessionProperties }),\n        ...(scopedProperties && { scopedProperties }),\n        ...(sessionConfig && { sessionConfig }),\n        transportType: TRANSPORT_TYPES.relay,\n      };\n\n      await this.client.session.set(session.topic, session);\n      await this.setExpiry(session.topic, session.expiry);\n\n      await this.client.core.pairing.updateMetadata({\n        topic: pendingSession.pairingTopic,\n        metadata: session.peer.metadata,\n      });\n\n      this.client.events.emit(\"session_connect\", { session });\n      this.events.emit(engineEvent(\"session_connect\", pendingSession.proposalId), { session });\n\n      this.pendingSessions.delete(pendingSession.proposalId);\n      this.deleteProposal(pendingSession.proposalId, false);\n      this.cleanupDuplicatePairings(session);\n\n      await this.sendResult<\"wc_sessionSettle\">({\n        id: payload.id,\n        topic,\n        result: true,\n        throwOnFailedPublish: true,\n      });\n    } catch (err: any) {\n      await this.sendError({\n        id,\n        topic,\n        error: err,\n      });\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionSettleResponse: EnginePrivate[\"onSessionSettleResponse\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { id } = payload;\n    if (isJsonRpcResult(payload)) {\n      await this.client.session.update(topic, { acknowledged: true });\n      this.events.emit(engineEvent(\"session_approve\", id), {});\n    } else if (isJsonRpcError(payload)) {\n      await this.client.session.delete(topic, getSdkError(\"USER_DISCONNECTED\"));\n      this.events.emit(engineEvent(\"session_approve\", id), { error: payload.error });\n    }\n  };\n\n  private onSessionUpdateRequest: EnginePrivate[\"onSessionUpdateRequest\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { params, id } = payload;\n    try {\n      const memoryKey = `${topic}_session_update`;\n      // compare the current request id with the last processed session update\n      // we want to update only if the request is newer than the last processed one\n      const lastSessionUpdateId = MemoryStore.get<number>(memoryKey);\n\n      if (lastSessionUpdateId && this.isRequestOutOfSync(lastSessionUpdateId, id)) {\n        this.client.logger.warn(`Discarding out of sync request - ${id}`);\n        this.sendError({ id, topic, error: getSdkError(\"INVALID_UPDATE_REQUEST\") });\n        return;\n      }\n      this.isValidUpdate({ topic, ...params });\n      try {\n        MemoryStore.set(memoryKey, id);\n        await this.client.session.update(topic, { namespaces: params.namespaces });\n        await this.sendResult<\"wc_sessionUpdate\">({\n          id,\n          topic,\n          result: true,\n          throwOnFailedPublish: true,\n        });\n      } catch (e) {\n        MemoryStore.delete(memoryKey);\n        throw e;\n      }\n\n      this.client.events.emit(\"session_update\", { id, topic, params });\n    } catch (err: any) {\n      await this.sendError({\n        id,\n        topic,\n        error: err,\n      });\n      this.client.logger.error(err);\n    }\n  };\n\n  // compares the timestamp of the last processed request with the current request\n  // client <-> client rpc ID is timestamp + 3 random digits\n  private isRequestOutOfSync = (lastId: number, currentId: number) => {\n    return currentId.toString().slice(0, -3) < lastId.toString().slice(0, -3);\n  };\n\n  private onSessionUpdateResponse: EnginePrivate[\"onSessionUpdateResponse\"] = (_topic, payload) => {\n    const { id } = payload;\n    const target = engineEvent(\"session_update\", id);\n    const listeners = this.events.listenerCount(target);\n    if (listeners === 0) {\n      throw new Error(`emitting ${target} without any listeners`);\n    }\n    if (isJsonRpcResult(payload)) {\n      this.events.emit(engineEvent(\"session_update\", id), {});\n    } else if (isJsonRpcError(payload)) {\n      this.events.emit(engineEvent(\"session_update\", id), { error: payload.error });\n    }\n  };\n\n  private onSessionExtendRequest: EnginePrivate[\"onSessionExtendRequest\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { id } = payload;\n    try {\n      this.isValidExtend({ topic });\n      await this.setExpiry(topic, calcExpiry(SESSION_EXPIRY));\n      await this.sendResult<\"wc_sessionExtend\">({\n        id,\n        topic,\n        result: true,\n        throwOnFailedPublish: true,\n      });\n      this.client.events.emit(\"session_extend\", { id, topic });\n    } catch (err: any) {\n      await this.sendError({\n        id,\n        topic,\n        error: err,\n      });\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionExtendResponse: EnginePrivate[\"onSessionExtendResponse\"] = (_topic, payload) => {\n    const { id } = payload;\n    const target = engineEvent(\"session_extend\", id);\n    const listeners = this.events.listenerCount(target);\n    if (listeners === 0) {\n      throw new Error(`emitting ${target} without any listeners`);\n    }\n    if (isJsonRpcResult(payload)) {\n      this.events.emit(engineEvent(\"session_extend\", id), {});\n    } else if (isJsonRpcError(payload)) {\n      this.events.emit(engineEvent(\"session_extend\", id), { error: payload.error });\n    }\n  };\n\n  private onSessionPingRequest: EnginePrivate[\"onSessionPingRequest\"] = async (topic, payload) => {\n    const { id } = payload;\n    try {\n      this.isValidPing({ topic });\n      await this.sendResult<\"wc_sessionPing\">({\n        id,\n        topic,\n        result: true,\n        throwOnFailedPublish: true,\n      });\n      this.client.events.emit(\"session_ping\", { id, topic });\n    } catch (err: any) {\n      await this.sendError({\n        id,\n        topic,\n        error: err,\n      });\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionPingResponse: EnginePrivate[\"onSessionPingResponse\"] = (_topic, payload) => {\n    const { id } = payload;\n    const target = engineEvent(\"session_ping\", id);\n\n    // put at the end of the stack to avoid a race condition\n    // where session_ping listener is not yet initialized\n    setTimeout(() => {\n      const listeners = this.events.listenerCount(target);\n      if (listeners === 0) {\n        throw new Error(`emitting ${target} without any listeners 2176`);\n      }\n\n      if (isJsonRpcResult(payload)) {\n        this.events.emit(engineEvent(\"session_ping\", id), {});\n      } else if (isJsonRpcError(payload)) {\n        this.events.emit(engineEvent(\"session_ping\", id), { error: payload.error });\n      }\n    }, 500);\n  };\n\n  private onSessionDeleteRequest: EnginePrivate[\"onSessionDeleteRequest\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { id } = payload;\n    try {\n      this.isValidDisconnect({ topic, reason: payload.params });\n      Promise.all([\n        new Promise((resolve) => {\n          // RPC request needs to happen before deletion as it utalises session encryption\n          this.client.core.relayer.once(RELAYER_EVENTS.publish, async () => {\n            resolve(await this.deleteSession({ topic, id }));\n          });\n        }),\n        this.sendResult<\"wc_sessionDelete\">({\n          id,\n          topic,\n          result: true,\n          throwOnFailedPublish: true,\n        }),\n        this.cleanupPendingSentRequestsForTopic({ topic, error: getSdkError(\"USER_DISCONNECTED\") }),\n      ]).catch((err) => this.client.logger.error(err));\n    } catch (err: any) {\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionRequest: EnginePrivate[\"onSessionRequest\"] = async (args) => {\n    const { topic, payload, attestation, encryptedId, transportType } = args;\n    const { id, params } = payload;\n    try {\n      await this.isValidRequest({ topic, ...params });\n      const session = this.client.session.get(topic);\n      const verifyContext = await this.getVerifyContext({\n        attestationId: attestation,\n        hash: hashMessage(JSON.stringify(formatJsonRpcRequest(\"wc_sessionRequest\", params, id))),\n        encryptedId,\n        metadata: session.peer.metadata,\n        transportType,\n      });\n      const request = {\n        id,\n        topic,\n        params,\n        verifyContext,\n      };\n      await this.setPendingSessionRequest(request);\n\n      if (\n        transportType === TRANSPORT_TYPES.link_mode &&\n        session.peer.metadata.redirect?.universal\n      ) {\n        // save app as supported for link mode\n        this.client.core.addLinkModeSupportedApp(session.peer.metadata.redirect?.universal);\n      }\n\n      if (this.client.signConfig?.disableRequestQueue) {\n        this.emitSessionRequest(request);\n      } else {\n        this.addSessionRequestToSessionRequestQueue(request);\n        this.processSessionRequestQueue();\n      }\n    } catch (err: any) {\n      await this.sendError({\n        id,\n        topic,\n        error: err,\n      });\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionRequestResponse: EnginePrivate[\"onSessionRequestResponse\"] = (\n    _topic,\n    payload,\n  ) => {\n    const { id } = payload;\n    const target = engineEvent(\"session_request\", id);\n    const listeners = this.events.listenerCount(target);\n    if (listeners === 0) {\n      throw new Error(`emitting ${target} without any listeners`);\n    }\n    if (isJsonRpcResult(payload)) {\n      this.events.emit(engineEvent(\"session_request\", id), { result: payload.result });\n    } else if (isJsonRpcError(payload)) {\n      this.events.emit(engineEvent(\"session_request\", id), { error: payload.error });\n    }\n  };\n\n  private onSessionEventRequest: EnginePrivate[\"onSessionEventRequest\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { id, params } = payload;\n    try {\n      // similar to session update, we want to discard out of sync requests\n      // additionally we have to check the event type as well e.g. chainChanged/accountsChanged\n      const memoryKey = `${topic}_session_event_${params.event.name}`;\n      // compare the current request id with the last processed session update\n      // we want to update only if the request is newer than the last processed one\n      const lastSessionUpdateId = MemoryStore.get<number>(memoryKey);\n      if (lastSessionUpdateId && this.isRequestOutOfSync(lastSessionUpdateId, id)) {\n        this.client.logger.info(`Discarding out of sync request - ${id}`);\n        return;\n      }\n\n      this.isValidEmit({ topic, ...params });\n      this.client.events.emit(\"session_event\", { id, topic, params });\n      MemoryStore.set(memoryKey, id);\n    } catch (err: any) {\n      await this.sendError({\n        id,\n        topic,\n        error: err,\n      });\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionAuthenticateResponse: EnginePrivate[\"onSessionAuthenticateResponse\"] = (\n    topic,\n    payload,\n  ) => {\n    const { id } = payload;\n    this.client.logger.trace({\n      type: \"method\",\n      method: \"onSessionAuthenticateResponse\",\n      topic,\n      payload,\n    });\n    if (isJsonRpcResult(payload)) {\n      this.events.emit(engineEvent(\"session_request\", id), { result: payload.result });\n    } else if (isJsonRpcError(payload)) {\n      this.events.emit(engineEvent(\"session_request\", id), { error: payload.error });\n    }\n  };\n\n  private onSessionAuthenticateRequest: EnginePrivate[\"onSessionAuthenticateRequest\"] = async (\n    args,\n  ) => {\n    const { topic, payload, attestation, encryptedId, transportType } = args;\n    try {\n      const { requester, authPayload, expiryTimestamp } = payload.params;\n      const verifyContext = await this.getVerifyContext({\n        attestationId: attestation,\n        hash: hashMessage(JSON.stringify(payload)),\n        encryptedId,\n        metadata: requester.metadata,\n        transportType,\n      });\n      const pendingRequest = {\n        requester,\n        pairingTopic: topic,\n        id: payload.id,\n        authPayload,\n        verifyContext,\n        expiryTimestamp,\n      };\n      await this.setAuthRequest(payload.id, {\n        request: pendingRequest,\n        pairingTopic: topic,\n        transportType,\n      });\n\n      if (transportType === TRANSPORT_TYPES.link_mode && requester.metadata.redirect?.universal) {\n        // save app as supported for link mode\n        this.client.core.addLinkModeSupportedApp(requester.metadata.redirect.universal);\n      }\n\n      this.client.events.emit(\"session_authenticate\", {\n        topic,\n        params: payload.params,\n        id: payload.id,\n        verifyContext,\n      });\n    } catch (err: any) {\n      this.client.logger.error(err);\n\n      const receiverPublicKey = payload.params.requester.publicKey;\n      const senderPublicKey = await this.client.core.crypto.generateKeyPair();\n      const appLink = this.getAppLinkIfEnabled(payload.params.requester.metadata, transportType);\n\n      const encodeOpts = {\n        type: TYPE_1,\n        receiverPublicKey,\n        senderPublicKey,\n      };\n      await this.sendError({\n        id: payload.id,\n        topic,\n        error: err,\n        encodeOpts,\n        rpcOpts: ENGINE_RPC_OPTS.wc_sessionAuthenticate.autoReject,\n        appLink,\n      });\n    }\n  };\n\n  private addSessionRequestToSessionRequestQueue = (request: PendingRequestTypes.Struct) => {\n    this.sessionRequestQueue.queue.push(request);\n  };\n\n  private cleanupAfterResponse = (params: EngineTypes.RespondParams) => {\n    this.deletePendingSessionRequest(params.response.id, { message: \"fulfilled\", code: 0 });\n    // intentionally delay the emitting of the next pending request a bit\n    setTimeout(() => {\n      this.sessionRequestQueue.state = ENGINE_QUEUE_STATES.idle;\n      this.processSessionRequestQueue();\n    }, toMiliseconds(this.requestQueueDelay));\n  };\n\n  // Allows for cleanup on any sent pending requests if the peer disconnects the session before responding\n  private cleanupPendingSentRequestsForTopic = ({\n    topic,\n    error,\n  }: {\n    topic: string;\n    error: ErrorResponse;\n  }) => {\n    const pendingRequests = this.client.core.history.pending;\n    if (pendingRequests.length > 0) {\n      const forSession = pendingRequests.filter(\n        (r) => r.topic === topic && r.request.method === \"wc_sessionRequest\",\n      );\n      forSession.forEach((r) => {\n        const id = r.request.id;\n        const target = engineEvent(\"session_request\", id);\n        const listeners = this.events.listenerCount(target);\n        if (listeners === 0) {\n          throw new Error(`emitting ${target} without any listeners`);\n        }\n        // notify .request() handler of the rejection\n        this.events.emit(engineEvent(\"session_request\", r.request.id), {\n          error,\n        });\n      });\n    }\n  };\n\n  private processSessionRequestQueue = () => {\n    if (this.sessionRequestQueue.state === ENGINE_QUEUE_STATES.active) {\n      this.client.logger.info(\"session request queue is already active.\");\n      return;\n    }\n    // Select the first/oldest request in the array to ensure last-in-first-out (LIFO)\n    const request = this.sessionRequestQueue.queue[0];\n    if (!request) {\n      this.client.logger.info(\"session request queue is empty.\");\n      return;\n    }\n\n    try {\n      this.sessionRequestQueue.state = ENGINE_QUEUE_STATES.active;\n      this.emitSessionRequest(request);\n    } catch (error) {\n      this.client.logger.error(error);\n    }\n  };\n\n  private emitSessionRequest = (request: PendingRequestTypes.Struct) => {\n    this.client.events.emit(\"session_request\", request);\n  };\n\n  // ---------- Expirer Events ---------------------------------------- //\n\n  private registerExpirerEvents() {\n    this.client.core.expirer.on(EXPIRER_EVENTS.expired, async (event: ExpirerTypes.Expiration) => {\n      const { topic, id } = parseExpirerTarget(event.target);\n      if (id && this.client.pendingRequest.keys.includes(id)) {\n        return await this.deletePendingSessionRequest(id, getInternalError(\"EXPIRED\"), true);\n      }\n      if (id && this.client.auth.requests.keys.includes(id)) {\n        return await this.deletePendingAuthRequest(id, getInternalError(\"EXPIRED\"), true);\n      }\n\n      if (topic) {\n        if (this.client.session.keys.includes(topic)) {\n          await this.deleteSession({ topic, expirerHasDeleted: true });\n          this.client.events.emit(\"session_expire\", { topic });\n        }\n      } else if (id) {\n        await this.deleteProposal(id, true);\n        this.client.events.emit(\"proposal_expire\", { id });\n      }\n    });\n  }\n\n  // ---------- Pairing Events ---------------------------------------- //\n  private registerPairingEvents() {\n    this.client.core.pairing.events.on(PAIRING_EVENTS.create, (pairing: PairingTypes.Struct) =>\n      this.onPairingCreated(pairing),\n    );\n    this.client.core.pairing.events.on(PAIRING_EVENTS.delete, (pairing: PairingTypes.Struct) => {\n      this.addToRecentlyDeleted(pairing.topic, \"pairing\");\n    });\n  }\n\n  /**\n   * when a pairing is created, we check if there is a pending proposal for it.\n   * if there is, we send it to onSessionProposeRequest to be processed as if it was received from the relay.\n   * It allows QR/URI to be scanned multiple times without having to create new pairing.\n   */\n  private onPairingCreated = (pairing: PairingTypes.Struct) => {\n    if (pairing.methods) {\n      this.expectedPairingMethodMap.set(pairing.topic, pairing.methods);\n    }\n    if (pairing.active) return;\n    const proposals = this.client.proposal.getAll();\n    const proposal = proposals.find((p) => p.pairingTopic === pairing.topic);\n    if (!proposal) return;\n    this.onSessionProposeRequest({\n      topic: pairing.topic,\n      payload: formatJsonRpcRequest(\n        \"wc_sessionPropose\",\n        {\n          ...proposal,\n          requiredNamespaces: proposal.requiredNamespaces,\n          optionalNamespaces: proposal.optionalNamespaces,\n          relays: proposal.relays,\n          proposer: proposal.proposer,\n          sessionProperties: proposal.sessionProperties,\n          scopedProperties: proposal.scopedProperties,\n        },\n        proposal.id,\n      ),\n    });\n  };\n\n  // ---------- Validation Helpers ------------------------------------ //\n  private isValidPairingTopic(topic: any) {\n    if (!isValidString(topic, false)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `pairing topic should be a string: ${topic}`,\n      );\n      throw new Error(message);\n    }\n    if (!this.client.core.pairing.pairings.keys.includes(topic)) {\n      const { message } = getInternalError(\n        \"NO_MATCHING_KEY\",\n        `pairing topic doesn't exist: ${topic}`,\n      );\n      throw new Error(message);\n    }\n    if (isExpired(this.client.core.pairing.pairings.get(topic).expiry)) {\n      const { message } = getInternalError(\"EXPIRED\", `pairing topic: ${topic}`);\n      throw new Error(message);\n    }\n  }\n\n  private async isValidSessionTopic(topic: any) {\n    if (!isValidString(topic, false)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `session topic should be a string: ${topic}`,\n      );\n      throw new Error(message);\n    }\n    // Store will throw custom message if topic was recently deleted\n    this.checkRecentlyDeleted(topic);\n    if (!this.client.session.keys.includes(topic)) {\n      const { message } = getInternalError(\n        \"NO_MATCHING_KEY\",\n        `session topic doesn't exist: ${topic}`,\n      );\n      throw new Error(message);\n    }\n    if (isExpired(this.client.session.get(topic).expiry)) {\n      await this.deleteSession({ topic });\n      const { message } = getInternalError(\"EXPIRED\", `session topic: ${topic}`);\n      throw new Error(message);\n    }\n\n    if (!this.client.core.crypto.keychain.has(topic)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `session topic does not exist in keychain: ${topic}`,\n      );\n      await this.deleteSession({ topic });\n      throw new Error(message);\n    }\n  }\n\n  private async isValidSessionOrPairingTopic(topic: string) {\n    this.checkRecentlyDeleted(topic);\n    if (this.client.session.keys.includes(topic)) {\n      await this.isValidSessionTopic(topic);\n    } else if (this.client.core.pairing.pairings.keys.includes(topic)) {\n      this.isValidPairingTopic(topic);\n    } else if (!isValidString(topic, false)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `session or pairing topic should be a string: ${topic}`,\n      );\n      throw new Error(message);\n    } else {\n      const { message } = getInternalError(\n        \"NO_MATCHING_KEY\",\n        `session or pairing topic doesn't exist: ${topic}`,\n      );\n      throw new Error(message);\n    }\n  }\n\n  private async isValidProposalId(id: any) {\n    if (!isValidId(id)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `proposal id should be a number: ${id}`,\n      );\n      throw new Error(message);\n    }\n    if (!this.client.proposal.keys.includes(id)) {\n      const { message } = getInternalError(\"NO_MATCHING_KEY\", `proposal id doesn't exist: ${id}`);\n      throw new Error(message);\n    }\n    if (isExpired(this.client.proposal.get(id).expiryTimestamp)) {\n      await this.deleteProposal(id);\n      const { message } = getInternalError(\"EXPIRED\", `proposal id: ${id}`);\n      throw new Error(message);\n    }\n  }\n\n  // ---------- Validation  ------------------------------------------- //\n\n  private isValidConnect: EnginePrivate[\"isValidConnect\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `connect() params: ${JSON.stringify(params)}`,\n      );\n      throw new Error(message);\n    }\n    const {\n      pairingTopic,\n      requiredNamespaces,\n      optionalNamespaces,\n      sessionProperties,\n      scopedProperties,\n      relays,\n    } = params;\n    if (!isUndefined(pairingTopic)) await this.isValidPairingTopic(pairingTopic);\n\n    if (!isValidRelays(relays, true)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `connect() relays: ${relays}`);\n      throw new Error(message);\n    }\n\n    // validate required namespaces only if they are defined\n    if (!isUndefined(requiredNamespaces) && isValidObject(requiredNamespaces) !== 0) {\n      this.validateNamespaces(requiredNamespaces, \"requiredNamespaces\");\n    }\n\n    // validate optional namespaces only if they are defined\n    if (!isUndefined(optionalNamespaces) && isValidObject(optionalNamespaces) !== 0) {\n      this.validateNamespaces(optionalNamespaces, \"optionalNamespaces\");\n    }\n\n    // validate session properties only if they are defined\n    if (!isUndefined(sessionProperties)) {\n      this.validateSessionProps(sessionProperties, \"sessionProperties\");\n    }\n\n    if (!isUndefined(scopedProperties)) {\n      this.validateSessionProps(scopedProperties, \"scopedProperties\");\n\n      const requestedNamespaces = Object.keys(requiredNamespaces || {}).concat(\n        Object.keys(optionalNamespaces || {}),\n      );\n\n      const scopedNamespaces = Object.keys(scopedProperties);\n      const valid = scopedNamespaces.every((ns) => requestedNamespaces.includes(ns));\n      if (!valid) {\n        throw new Error(\n          `Scoped properties must be a subset of required/optional namespaces, received: ${JSON.stringify(\n            scopedProperties,\n          )}, required/optional namespaces: ${JSON.stringify(requestedNamespaces)}`,\n        );\n      }\n    }\n  };\n\n  private validateNamespaces = (\n    namespaces: ProposalTypes.RequiredNamespaces | ProposalTypes.OptionalNamespaces,\n    type: string,\n  ) => {\n    const validRequiredNamespacesError = isValidRequiredNamespaces(namespaces, \"connect()\", type);\n    if (validRequiredNamespacesError) throw new Error(validRequiredNamespacesError.message);\n  };\n\n  private isValidApprove: EnginePrivate[\"isValidApprove\"] = async (params) => {\n    if (!isValidParams(params))\n      throw new Error(\n        getInternalError(\"MISSING_OR_INVALID\", `approve() params: ${params}`).message,\n      );\n    const { id, namespaces, relayProtocol, sessionProperties, scopedProperties } = params;\n\n    this.checkRecentlyDeleted(id);\n    await this.isValidProposalId(id);\n    const proposal = this.client.proposal.get(id);\n    const validNamespacesError = isValidNamespaces(namespaces, \"approve()\");\n    if (validNamespacesError) throw new Error(validNamespacesError.message);\n    const conformingNamespacesError = isConformingNamespaces(\n      proposal.requiredNamespaces,\n      namespaces,\n      \"approve()\",\n    );\n    if (conformingNamespacesError) throw new Error(conformingNamespacesError.message);\n    if (!isValidString(relayProtocol, true)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `approve() relayProtocol: ${relayProtocol}`,\n      );\n      throw new Error(message);\n    }\n\n    if (!isUndefined(sessionProperties)) {\n      this.validateSessionProps(sessionProperties, \"sessionProperties\");\n    }\n\n    if (!isUndefined(scopedProperties)) {\n      this.validateSessionProps(scopedProperties, \"scopedProperties\");\n\n      const approvedNamespaces = new Set(Object.keys(namespaces));\n      const scopedNamespaces = Object.keys(scopedProperties);\n\n      // the approved scoped namespaces must be a subset of the approved namespaces\n      const valid = scopedNamespaces.every((ns) => approvedNamespaces.has(ns));\n      if (!valid) {\n        throw new Error(\n          `Scoped properties must be a subset of approved namespaces, received: ${JSON.stringify(\n            scopedProperties,\n          )}, approved namespaces: ${Array.from(approvedNamespaces).join(\", \")}`,\n        );\n      }\n    }\n  };\n\n  private isValidReject: EnginePrivate[\"isValidReject\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `reject() params: ${params}`);\n      throw new Error(message);\n    }\n    const { id, reason } = params;\n    this.checkRecentlyDeleted(id);\n    await this.isValidProposalId(id);\n    if (!isValidErrorReason(reason)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `reject() reason: ${JSON.stringify(reason)}`,\n      );\n      throw new Error(message);\n    }\n  };\n\n  private isValidSessionSettleRequest: EnginePrivate[\"isValidSessionSettleRequest\"] = (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `onSessionSettleRequest() params: ${params}`,\n      );\n      throw new Error(message);\n    }\n    const { relay, controller, namespaces, expiry } = params;\n    if (!isValidRelay(relay)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `onSessionSettleRequest() relay protocol should be a string`,\n      );\n      throw new Error(message);\n    }\n    const validControllerError = isValidController(controller, \"onSessionSettleRequest()\");\n    if (validControllerError) throw new Error(validControllerError.message);\n    const validNamespacesError = isValidNamespaces(namespaces, \"onSessionSettleRequest()\");\n    if (validNamespacesError) throw new Error(validNamespacesError.message);\n    if (isExpired(expiry)) {\n      const { message } = getInternalError(\"EXPIRED\", `onSessionSettleRequest()`);\n      throw new Error(message);\n    }\n  };\n\n  private isValidUpdate: EnginePrivate[\"isValidUpdate\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `update() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic, namespaces } = params;\n\n    this.checkRecentlyDeleted(topic);\n    await this.isValidSessionTopic(topic);\n    const session = this.client.session.get(topic);\n    const validNamespacesError = isValidNamespaces(namespaces, \"update()\");\n    if (validNamespacesError) throw new Error(validNamespacesError.message);\n    const conformingNamespacesError = isConformingNamespaces(\n      session.requiredNamespaces,\n      namespaces,\n      \"update()\",\n    );\n    if (conformingNamespacesError) throw new Error(conformingNamespacesError.message);\n    // TODO(ilja) - check if wallet\n  };\n\n  private isValidExtend: EnginePrivate[\"isValidExtend\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `extend() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic } = params;\n\n    this.checkRecentlyDeleted(topic);\n    await this.isValidSessionTopic(topic);\n  };\n\n  private isValidRequest: EnginePrivate[\"isValidRequest\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `request() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic, request, chainId, expiry } = params;\n    this.checkRecentlyDeleted(topic);\n    await this.isValidSessionTopic(topic);\n    const { namespaces } = this.client.session.get(topic);\n    if (!isValidNamespacesChainId(namespaces, chainId)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `request() chainId: ${chainId}`);\n      throw new Error(message);\n    }\n    if (!isValidRequest(request)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `request() ${JSON.stringify(request)}`,\n      );\n      throw new Error(message);\n    }\n    if (!isValidNamespacesRequest(namespaces, chainId, request.method)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `request() method: ${request.method}`,\n      );\n      throw new Error(message);\n    }\n    if (expiry && !isValidRequestExpiry(expiry, SESSION_REQUEST_EXPIRY_BOUNDARIES)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `request() expiry: ${expiry}. Expiry must be a number (in seconds) between ${SESSION_REQUEST_EXPIRY_BOUNDARIES.min} and ${SESSION_REQUEST_EXPIRY_BOUNDARIES.max}`,\n      );\n      throw new Error(message);\n    }\n  };\n\n  private isValidRespond: EnginePrivate[\"isValidRespond\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `respond() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic, response } = params;\n    try {\n      // if the session is already disconnected, we can't respond to the request so we need to delete it\n      await this.isValidSessionTopic(topic);\n    } catch (error) {\n      if (params?.response?.id) this.cleanupAfterResponse(params);\n      throw error;\n    }\n    if (!isValidResponse(response)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `respond() response: ${JSON.stringify(response)}`,\n      );\n      throw new Error(message);\n    }\n  };\n\n  private isValidPing: EnginePrivate[\"isValidPing\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `ping() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic } = params;\n    await this.isValidSessionOrPairingTopic(topic);\n  };\n\n  private isValidEmit: EnginePrivate[\"isValidEmit\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `emit() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic, event, chainId } = params;\n    await this.isValidSessionTopic(topic);\n    const { namespaces } = this.client.session.get(topic);\n    if (!isValidNamespacesChainId(namespaces, chainId)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `emit() chainId: ${chainId}`);\n      throw new Error(message);\n    }\n    if (!isValidEvent(event)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `emit() event: ${JSON.stringify(event)}`,\n      );\n      throw new Error(message);\n    }\n    if (!isValidNamespacesEvent(namespaces, chainId, event.name)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `emit() event: ${JSON.stringify(event)}`,\n      );\n      throw new Error(message);\n    }\n  };\n\n  private isValidDisconnect: EnginePrivate[\"isValidDisconnect\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `disconnect() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic } = params;\n    await this.isValidSessionOrPairingTopic(topic);\n  };\n\n  private isValidAuthenticate = (params: AuthTypes.SessionAuthenticateParams) => {\n    const { chains, uri, domain, nonce } = params;\n\n    // ----- validate params ----- //\n    if (!Array.isArray(chains) || chains.length === 0) {\n      throw new Error(\"chains is required and must be a non-empty array\");\n    }\n    if (!isValidString(uri, false)) {\n      throw new Error(\"uri is required parameter\");\n    }\n    if (!isValidString(domain, false)) {\n      throw new Error(\"domain is required parameter\");\n    }\n    if (!isValidString(nonce, false)) {\n      throw new Error(\"nonce is required parameter\");\n    }\n\n    // ----- reject multi namespaces ----- //\n    const uniqueNamespaces = [...new Set(chains.map((chain) => parseChainId(chain).namespace))];\n    if (uniqueNamespaces.length > 1) {\n      throw new Error(\n        \"Multi-namespace requests are not supported. Please request single namespace only.\",\n      );\n    }\n\n    const { namespace } = parseChainId(chains[0]);\n    if (namespace !== \"eip155\") {\n      throw new Error(\n        \"Only eip155 namespace is supported for authenticated sessions. Please use .connect() for non-eip155 chains.\",\n      );\n    }\n  };\n\n  private getVerifyContext = async (params: {\n    attestationId?: string;\n    hash?: string;\n    encryptedId?: string;\n    metadata: CoreTypes.Metadata;\n    transportType?: RelayerTypes.TransportType;\n  }) => {\n    const { attestationId, hash, encryptedId, metadata, transportType } = params;\n    const context: Verify.Context = {\n      verified: {\n        verifyUrl: metadata.verifyUrl || VERIFY_SERVER,\n        validation: \"UNKNOWN\",\n        origin: metadata.url || \"\",\n      },\n    };\n\n    try {\n      if (transportType === TRANSPORT_TYPES.link_mode) {\n        const applink = this.getAppLinkIfEnabled(metadata, transportType);\n        context.verified.validation =\n          applink && new URL(applink).origin === new URL(metadata.url).origin ? \"VALID\" : \"INVALID\";\n        return context;\n      }\n      const result = await this.client.core.verify.resolve({\n        attestationId,\n        hash,\n        encryptedId,\n        verifyUrl: metadata.verifyUrl,\n      });\n      if (result) {\n        context.verified.origin = result.origin;\n        context.verified.isScam = result.isScam;\n        context.verified.validation =\n          result.origin === new URL(metadata.url).origin ? \"VALID\" : \"INVALID\";\n      }\n    } catch (e) {\n      this.client.logger.warn(e);\n    }\n\n    this.client.logger.debug(`Verify context: ${JSON.stringify(context)}`);\n    return context;\n  };\n\n  private validateSessionProps = (properties: SessionTypes.ScopedProperties, type: string) => {\n    Object.values(properties).forEach((property, index) => {\n      if (property === null || property === undefined) {\n        const { message } = getInternalError(\n          \"MISSING_OR_INVALID\",\n          `${type} must contain an existing value for each key. Received: ${property} for key ${\n            Object.keys(properties)[index]\n          }`,\n        );\n        throw new Error(message);\n      }\n    });\n  };\n\n  private getPendingAuthRequest = (id: number) => {\n    const request = this.client.auth.requests.get(id);\n    return typeof request === \"object\" ? request : undefined;\n  };\n\n  private addToRecentlyDeleted = (\n    id: string | number,\n    type: \"pairing\" | \"session\" | \"proposal\" | \"request\",\n  ) => {\n    this.recentlyDeletedMap.set(id, type);\n    // remove first half of the map if it exceeds the limit\n    if (this.recentlyDeletedMap.size >= this.recentlyDeletedLimit) {\n      let i = 0;\n      const numItemsToDelete = this.recentlyDeletedLimit / 2;\n      for (const k of this.recentlyDeletedMap.keys()) {\n        if (i++ >= numItemsToDelete) {\n          break;\n        }\n        this.recentlyDeletedMap.delete(k);\n      }\n    }\n  };\n\n  private checkRecentlyDeleted = (id: string | number) => {\n    const deletedRecord = this.recentlyDeletedMap.get(id);\n    if (deletedRecord) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `Record was recently deleted - ${deletedRecord}: ${id}`,\n      );\n      throw new Error(message);\n    }\n  };\n\n  private isLinkModeEnabled = (\n    peerMetadata?: CoreTypes.Metadata,\n    transportType?: RelayerTypes.TransportType,\n  ): boolean => {\n    if (!peerMetadata || transportType !== TRANSPORT_TYPES.link_mode) return false;\n\n    return (\n      this.client.metadata?.redirect?.linkMode === true &&\n      this.client.metadata?.redirect?.universal !== undefined &&\n      this.client.metadata?.redirect?.universal !== \"\" &&\n      peerMetadata?.redirect?.universal !== undefined &&\n      peerMetadata?.redirect?.universal !== \"\" &&\n      peerMetadata?.redirect?.linkMode === true &&\n      this.client.core.linkModeSupportedApps.includes(peerMetadata.redirect.universal) &&\n      typeof (global as any)?.Linking !== \"undefined\"\n    );\n  };\n\n  private getAppLinkIfEnabled = (\n    peerMetadata?: CoreTypes.Metadata,\n    transportType?: RelayerTypes.TransportType,\n  ): string | undefined => {\n    return this.isLinkModeEnabled(peerMetadata, transportType)\n      ? peerMetadata?.redirect?.universal\n      : undefined;\n  };\n\n  private handleLinkModeMessage = ({ url }: { url: string }) => {\n    if (!url || !url.includes(\"wc_ev\") || !url.includes(\"topic\")) return;\n\n    const topic = getSearchParamFromURL(url, \"topic\") || \"\";\n    const message = decodeURIComponent(getSearchParamFromURL(url, \"wc_ev\") || \"\");\n\n    const sessionExists = this.client.session.keys.includes(topic);\n\n    if (sessionExists) {\n      this.client.session.update(topic, { transportType: TRANSPORT_TYPES.link_mode });\n    }\n\n    this.client.core.dispatchEnvelope({ topic, message, sessionExists });\n  };\n\n  private registerLinkModeListeners = async () => {\n    if (isTestRun() || (isReactNative() && this.client.metadata.redirect?.linkMode)) {\n      const linking = (global as any)?.Linking;\n      // global.Linking is set by react-native-compat\n      if (typeof linking !== \"undefined\") {\n        // set URL listener\n        linking.addEventListener(\"url\", this.handleLinkModeMessage, this.client.name);\n\n        // check for initial URL -> cold boots\n        const initialUrl = await linking.getInitialURL();\n        if (initialUrl) {\n          // wait to process the message to allow event listeners to be registered by the implementing app\n          setTimeout(() => {\n            this.handleLinkModeMessage({ url: initialUrl });\n          }, 50);\n        }\n      }\n    }\n  };\n\n  private shouldSetTVF = (\n    protocolMethod: JsonRpcTypes.WcMethod,\n    params: JsonRpcTypes.RequestParams[\"wc_sessionRequest\"],\n  ) => {\n    if (!params) return false;\n    if (protocolMethod !== \"wc_sessionRequest\") return false;\n    const { request } = params;\n    return Object.keys(TVF_METHODS).includes(request.method);\n  };\n\n  private getTVFParams = (\n    id: number,\n    params: JsonRpcTypes.RequestParams[\"wc_sessionRequest\"],\n    result?: any,\n  ) => {\n    try {\n      const requestMethod = params.request.method;\n      const txHashes = this.extractTxHashesFromResult(requestMethod, result);\n      const tvf: RelayerTypes.ITVF = {\n        correlationId: id,\n        rpcMethods: [requestMethod],\n        chainId: params.chainId,\n        ...(this.isValidContractData(params.request.params) && {\n          // initially only get contractAddresses from EVM txs\n          contractAddresses: [params.request.params?.[0]?.to],\n        }),\n        txHashes,\n      };\n      return tvf;\n    } catch (e) {\n      this.client.logger.warn(\"Error getting TVF params\", e);\n    }\n    return {};\n  };\n\n  private isValidContractData = (params: any) => {\n    if (!params) return false;\n    try {\n      const data = params?.data || params?.[0]?.data;\n\n      if (!data.startsWith(\"0x\")) return false;\n\n      const hexPart = data.slice(2);\n      if (!/^[0-9a-fA-F]*$/.test(hexPart)) return false;\n\n      return hexPart.length % 2 === 0;\n    } catch (e) {}\n    return false;\n  };\n\n  private extractTxHashesFromResult = (method: string, result: any): string[] => {\n    try {\n      const methodConfig = TVF_METHODS[method as keyof typeof TVF_METHODS];\n      // result = 0x...\n      if (typeof result === \"string\") {\n        return [result];\n      }\n\n      // result = { key: [0x...] } or { key: 0x... }\n      const hashes: string[] = result[methodConfig.key];\n\n      // result = { key: [0x...] }\n      if (isValidArray(hashes)) {\n        if (method === \"solana_signAllTransactions\") {\n          return hashes.map((hash) => extractSolanaTransactionId(hash));\n        }\n\n        return hashes;\n\n        // result = { key: 0x... }\n      } else if (typeof hashes === \"string\") {\n        return [hashes];\n      }\n    } catch (e) {\n      this.client.logger.warn(\"Error extracting tx hashes from result\", e);\n    }\n    return [];\n  };\n}\n","import { Store } from \"@walletconnect/core\";\nimport { Logger } from \"@walletconnect/logger\";\nimport { ICore, ProposalTypes } from \"@walletconnect/types\";\n\nimport { SIGN_CLIENT_STORAGE_PREFIX, PROPOSAL_CONTEXT } from \"../constants\";\n\nexport class Proposal extends Store<number, ProposalTypes.Struct> {\n  constructor(public core: ICore, public logger: Logger) {\n    super(core, logger, PROPOSAL_CONTEXT, SIGN_CLIENT_STORAGE_PREFIX);\n  }\n}\n","import { Store } from \"@walletconnect/core\";\nimport { Logger } from \"@walletconnect/logger\";\nimport { ICore, SessionTypes } from \"@walletconnect/types\";\n\nimport { SIGN_CLIENT_STORAGE_PREFIX, SESSION_CONTEXT } from \"../constants\";\n\nexport class Session extends Store<string, SessionTypes.Struct> {\n  constructor(public core: ICore, public logger: Logger) {\n    super(core, logger, SESSION_CONTEXT, SIGN_CLIENT_STORAGE_PREFIX);\n  }\n}\n","import { Store } from \"@walletconnect/core\";\nimport { Logger } from \"@walletconnect/logger\";\nimport { ICore, PendingRequestTypes } from \"@walletconnect/types\";\nimport { REQUEST_CONTEXT, SIGN_CLIENT_STORAGE_PREFIX } from \"../constants\";\n\nexport class PendingRequest extends Store<number, PendingRequestTypes.Struct> {\n  constructor(public core: ICore, public logger: Logger) {\n    super(\n      core,\n      logger,\n      REQUEST_CONTEXT,\n      SIGN_CLIENT_STORAGE_PREFIX,\n      (val: PendingRequestTypes.Struct) => val.id,\n    );\n  }\n}\n","import { Store } from \"@walletconnect/core\";\nimport { Logger } from \"@walletconnect/logger\";\nimport { ICore } from \"@walletconnect/types\";\n\nimport { AUTH_KEYS_CONTEXT, AUTH_STORAGE_PREFIX, AUTH_PUBLIC_KEY_NAME } from \"../constants\";\n\nexport class AuthKey extends Store<string, { responseTopic: string; publicKey: string }> {\n  constructor(public core: ICore, public logger: Logger) {\n    super(core, logger, AUTH_KEYS_CONTEXT, AUTH_STORAGE_PREFIX, () => AUTH_PUBLIC_KEY_NAME);\n  }\n}\n","import { Store } from \"@walletconnect/core\";\nimport { Logger } from \"@walletconnect/logger\";\nimport { ICore } from \"@walletconnect/types\";\n\nimport { AUTH_PAIRING_TOPIC_CONTEXT, AUTH_STORAGE_PREFIX } from \"../constants\";\n\nexport class AuthPairingTopic extends Store<string, { topic: string; pairingTopic: string }> {\n  constructor(public core: ICore, public logger: Logger) {\n    super(core, logger, AUTH_PAIRING_TOPIC_CONTEXT, AUTH_STORAGE_PREFIX);\n  }\n}\n","import { Store } from \"@walletconnect/core\";\nimport { Logger } from \"@walletconnect/logger\";\nimport { AuthTypes, ICore } from \"@walletconnect/types\";\n\nimport { AUTH_STORAGE_PREFIX, AUTH_REQUEST_CONTEXT } from \"../constants\";\n\nexport class AuthRequest extends Store<number, AuthTypes.PendingRequest> {\n  constructor(public core: ICore, public logger: Logger) {\n    super(\n      core,\n      logger,\n      AUTH_REQUEST_CONTEXT,\n      AUTH_STORAGE_PREFIX,\n      (val: AuthTypes.PendingRequest) => val.id,\n    );\n  }\n}\n","import { Logger } from \"@walletconnect/logger\";\nimport { IAuth, ICore } from \"@walletconnect/types\";\nimport { AuthPairingTopic } from \"./authPairingTopic\";\nimport { AuthRequest } from \"./authRequest\";\nimport { AuthKey } from \"./authKey\";\n\nexport class AuthStore {\n  public authKeys: IAuth[\"authKeys\"];\n  public pairingTopics: IAuth[\"pairingTopics\"];\n  public requests: IAuth[\"requests\"];\n\n  constructor(public core: ICore, public logger: Logger) {\n    this.authKeys = new AuthKey(this.core, this.logger);\n    this.pairingTopics = new AuthPairingTopic(this.core, this.logger);\n    this.requests = new AuthRequest(this.core, this.logger);\n  }\n\n  public async init() {\n    await this.authKeys.init();\n    await this.pairingTopics.init();\n    await this.requests.init();\n  }\n}\n","import { Core } from \"@walletconnect/core\";\nimport {\n  generateChildLogger,\n  getDefaultLoggerOptions,\n  getLoggerContext,\n  pino,\n} from \"@walletconnect/logger\";\nimport { SignClientTypes, ISignClient, ISignClientEvents, EngineTypes } from \"@walletconnect/types\";\nimport { ONE_SECOND, toMiliseconds } from \"@walletconnect/time\";\nimport { populateAppMetadata } from \"@walletconnect/utils\";\nimport { EventEmitter } from \"events\";\nimport { SIGN_CLIENT_DEFAULT, SIGN_CLIENT_PROTOCOL, SIGN_CLIENT_VERSION } from \"./constants\";\nimport { AuthStore, Engine, PendingRequest, Proposal, Session } from \"./controllers\";\n\nexport class SignClient extends ISignClient {\n  public readonly protocol = SIGN_CLIENT_PROTOCOL;\n  public readonly version = SIGN_CLIENT_VERSION;\n  public readonly name: ISignClient[\"name\"] = SIGN_CLIENT_DEFAULT.name;\n  public readonly metadata: ISignClient[\"metadata\"];\n\n  public core: ISignClient[\"core\"];\n  public logger: ISignClient[\"logger\"];\n  public events: ISignClient[\"events\"] = new EventEmitter();\n  public engine: ISignClient[\"engine\"];\n  public session: ISignClient[\"session\"];\n  public proposal: ISignClient[\"proposal\"];\n  public pendingRequest: ISignClient[\"pendingRequest\"];\n  public auth: ISignClient[\"auth\"];\n  public signConfig?: ISignClient[\"signConfig\"];\n\n  static async init(opts?: SignClientTypes.Options) {\n    const client = new SignClient(opts);\n    await client.initialize();\n\n    return client;\n  }\n\n  constructor(opts?: SignClientTypes.Options) {\n    super(opts);\n\n    this.name = opts?.name || SIGN_CLIENT_DEFAULT.name;\n    this.metadata = populateAppMetadata(opts?.metadata);\n    this.signConfig = opts?.signConfig;\n\n    const logger =\n      typeof opts?.logger !== \"undefined\" && typeof opts?.logger !== \"string\"\n        ? opts.logger\n        : pino(getDefaultLoggerOptions({ level: opts?.logger || SIGN_CLIENT_DEFAULT.logger }));\n\n    this.core = opts?.core || new Core(opts);\n    this.logger = generateChildLogger(logger, this.name);\n    this.session = new Session(this.core, this.logger);\n    this.proposal = new Proposal(this.core, this.logger);\n    this.pendingRequest = new PendingRequest(this.core, this.logger);\n    this.engine = new Engine(this);\n    this.auth = new AuthStore(this.core, this.logger);\n  }\n\n  get context() {\n    return getLoggerContext(this.logger);\n  }\n\n  get pairing() {\n    return this.core.pairing.pairings;\n  }\n\n  // ---------- Events ----------------------------------------------- //\n\n  public on: ISignClientEvents[\"on\"] = (name, listener) => {\n    return this.events.on(name, listener);\n  };\n\n  public once: ISignClientEvents[\"once\"] = (name, listener) => {\n    return this.events.once(name, listener);\n  };\n\n  public off: ISignClientEvents[\"off\"] = (name, listener) => {\n    return this.events.off(name, listener);\n  };\n\n  public removeListener: ISignClientEvents[\"removeListener\"] = (name, listener) => {\n    return this.events.removeListener(name, listener);\n  };\n\n  public removeAllListeners: ISignClientEvents[\"removeAllListeners\"] = (name) => {\n    return this.events.removeAllListeners(name);\n  };\n\n  // ---------- Engine ----------------------------------------------- //\n\n  public connect: ISignClient[\"connect\"] = async (params) => {\n    try {\n      return await this.engine.connect(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public pair: ISignClient[\"pair\"] = async (params) => {\n    try {\n      return await this.engine.pair(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public approve: ISignClient[\"approve\"] = async (params) => {\n    try {\n      return await this.engine.approve(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public reject: ISignClient[\"reject\"] = async (params) => {\n    try {\n      return await this.engine.reject(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public update: ISignClient[\"update\"] = async (params) => {\n    try {\n      return await this.engine.update(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public extend: ISignClient[\"extend\"] = async (params) => {\n    try {\n      return await this.engine.extend(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public request: ISignClient[\"request\"] = async <T>(params: EngineTypes.RequestParams) => {\n    try {\n      return await this.engine.request<T>(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public respond: ISignClient[\"respond\"] = async (params) => {\n    try {\n      return await this.engine.respond(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public ping: ISignClient[\"ping\"] = async (params) => {\n    try {\n      return await this.engine.ping(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public emit: ISignClient[\"emit\"] = async (params) => {\n    try {\n      return await this.engine.emit(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public disconnect: ISignClient[\"disconnect\"] = async (params) => {\n    try {\n      return await this.engine.disconnect(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public find: ISignClient[\"find\"] = (params) => {\n    try {\n      return this.engine.find(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public getPendingSessionRequests: ISignClient[\"getPendingSessionRequests\"] = () => {\n    try {\n      return this.engine.getPendingSessionRequests();\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public authenticate: ISignClient[\"authenticate\"] = async (params, walletUniversalLink) => {\n    try {\n      return await this.engine.authenticate(params, walletUniversalLink);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public formatAuthMessage: ISignClient[\"formatAuthMessage\"] = (params) => {\n    try {\n      return this.engine.formatAuthMessage(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public approveSessionAuthenticate: ISignClient[\"approveSessionAuthenticate\"] = async (params) => {\n    try {\n      return await this.engine.approveSessionAuthenticate(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public rejectSessionAuthenticate: ISignClient[\"rejectSessionAuthenticate\"] = async (params) => {\n    try {\n      return await this.engine.rejectSessionAuthenticate(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  // ---------- Private ----------------------------------------------- //\n\n  private async initialize() {\n    this.logger.trace(`Initialized`);\n    try {\n      await this.core.start();\n      await this.session.init();\n      await this.proposal.init();\n      await this.pendingRequest.init();\n      await this.auth.init();\n      await this.engine.init();\n      this.logger.info(`SignClient Initialization Success`);\n      setTimeout(() => {\n        this.engine.processRelayMessageCache();\n      }, toMiliseconds(ONE_SECOND));\n    } catch (error: any) {\n      this.logger.info(`SignClient Initialization Failure`);\n      this.logger.error(error.message);\n      throw error;\n    }\n  }\n}\n","import { SignClient as Client } from \"./client\";\nimport { Session } from \"./controllers/session\";\nexport * from \"./constants\";\n\nexport const SessionStore = Session;\nexport const SignClient = Client;\nexport default Client;\n"],"names":["THIRTY_DAYS","SEVEN_DAYS","FIVE_MINUTES","ONE_DAY","ONE_HOUR","IEngine","client","__publicField","ENGINE_CONTEXT","EventEmmiter","ENGINE_QUEUE_STATES","ONE_SECOND","ENGINE_RPC_OPTS","toMiliseconds","params","connectParams","__spreadProps","__spreadValues","pairingTopic","requiredNamespaces","optionalNamespaces","sessionProperties","scopedProperties","relays","topic","uri","active","pairing","error","newTopic","newUri","message","getInternalError","publicKey","expiry","expiryTimestamp","calcExpiry","proposal","RELAYER_DEFAULT_PROTOCOL","payloadId","sessionConnectTarget","engineEvent","reject","resolve","approval","createDelayedPromise","PROPOSAL_EXPIRY_MESSAGE","proposalExpireHandler","id","session","_a","_b","_c","configEvent","EVENT_CLIENT_SESSION_TRACES","EVENT_CLIENT_SESSION_ERRORS","relayProtocol","namespaces","sessionConfig","proposer","event","selfPublicKey","peerPublicKey","sessionTopic","sessionSettle","SESSION_EXPIRY","transportType","TRANSPORT_TYPES","getSdkError","reason","acknowledged","clientRpcId","relayRpcId","getBigIntRpcId","oldNamespaces","e","chainId","request","done","result","protocolMethod","appLink","protocolRequestParams","shouldSetTVF","wcDeepLink","getDeepLink","WALLETCONNECT_DEEPLINK_CHOICE","handleDeeplinkRedirect","response","isJsonRpcResult","isJsonRpcError","isSessionCompatible","walletUniversalLink","isLinkMode","chains","statement","domain","nonce","type","exp","nbf","methods","resources","connectionUri","responseTopic","hashKey","AUTH_PUBLIC_KEY_NAME","namespace","parseChainId","recap","createEncodedRecap","getRecapFromResources","mergeEncodedRecaps","authRequestExpiry","authenticateId","sessionConnectEventTarget","authenticateEventTarget","onSessionConnect","onAuthenticate","payload","cacaos","responder","approvedMethods","approvedAccounts","cacao","validateSignedCacao","approvedChains","getNamespacedDidChainId","parsedAddress","getDidAddress","methodsfromRecap","getMethodsFromRecap","chainsFromRecap","getChainsFromRecap","chain","buildNamespacesFromAuth","linkModeURL","formatJsonRpcRequest","TYPE_2","BASE64URL","getLinkModeURL","sessionAuthenticateResponseParams","auths","EVENT_CLIENT_AUTHENTICATE_TRACES","EVENT_CLIENT_AUTHENTICATE_ERRORS","pendingRequest","receiverPublicKey","senderPublicKey","encodeOpts","TYPE_1","invalidErr","iss","formatMessage","duplicates","p","expirerHasDeleted","emitEvent","self","r","verifyContext","args","method","throwOnFailedPublish","tvf","encoding","BASE64","attestation","METHODS_TO_VERIFY","decryptedId","hashMessage","opts","redirectURL","formatJsonRpcResult","record","rpcOpts","formatJsonRpcError","sessionTopics","proposalIds","toCleanup","isExpired","encryptedId","reqMethod","resMethod","requestMethod","expectedMethods","EVENT_CLIENT_PAIRING_ERRORS","EVENT_CLIENT_PAIRING_TRACES","err","subscriptionId","target","relay","controller","pendingSession","s","memoryKey","lastSessionUpdateId","MemoryStore","lastId","currentId","_topic","RELAYER_EVENTS","requester","authPayload","pendingRequests","isValidParams","isUndefined","isValidRelays","isValidObject","requestedNamespaces","ns","validRequiredNamespacesError","isValidRequiredNamespaces","validNamespacesError","isValidNamespaces","conformingNamespacesError","isConformingNamespaces","isValidString","approvedNamespaces","isValidErrorReason","isValidRelay","validControllerError","isValidController","isValidNamespacesChainId","isValidRequest","isValidNamespacesRequest","isValidRequestExpiry","SESSION_REQUEST_EXPIRY_BOUNDARIES","isValidResponse","isValidEvent","isValidNamespacesEvent","attestationId","hash","metadata","context","VERIFY_SERVER","applink","properties","property","index","i","numItemsToDelete","k","deletedRecord","peerMetadata","_d","_e","_f","_g","_h","_i","url","getSearchParamFromURL","sessionExists","isTestRun","isReactNative","linking","initialUrl","TVF_METHODS","txHashes","data","hexPart","methodConfig","hashes","isValidArray","extractSolanaTransactionId","topics","pendingMessages","messages","isJsonRpcRequest","isJsonRpcResponse","EXPIRER_EVENTS","parseExpirerTarget","PAIRING_EVENTS","isValidId","Store","core","logger","PROPOSAL_CONTEXT","SIGN_CLIENT_STORAGE_PREFIX","SESSION_CONTEXT","REQUEST_CONTEXT","val","AUTH_KEYS_CONTEXT","AUTH_STORAGE_PREFIX","AUTH_PAIRING_TOPIC_CONTEXT","AUTH_REQUEST_CONTEXT","o","AuthKey","AuthPairingTopic","AuthRequest","SignClient","ISignClient","SIGN_CLIENT_PROTOCOL","SIGN_CLIENT_VERSION","SIGN_CLIENT_DEFAULT","EventEmitter","name","listener","populateAppMetadata","pino","getDefaultLoggerOptions","Core","generateChildLogger","Session","Proposal","PendingRequest","Engine","AuthStore","getLoggerContext","Client"],"mappings":"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"}